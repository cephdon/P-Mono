/*
This file contains the IDL types for the PrtValues
*/

[
	uuid(0b531b5c-81a2-4710-a356-4fceb6d36a47),
	version(1.0),
	pointer_default(ptr)
]
interface PrtValues_IDL
{
	import "PrtTypes_IDL.idl";

	typedef enum PRT_SPECIAL_EVENT
	{
		PRT_SPECIAL_EVENT_NULL = 0,  /**< The id of the null event */
		PRT_SPECIAL_EVENT_HALT = 1   /**< The id of the halt event */
	} PRT_SPECIAL_EVENT;

	/**
	* \enum
	* These are the kinds of values in the P type system.
	**/
	typedef enum PRT_VALUE_KIND
	{
		PRT_VALKIND_NULL = 0,    /**< The kind of the null value in type null */
		PRT_VALKIND_BOOL = 1,    /**< The kind of bool values                 */
		PRT_VALKIND_INT = 2,    /**< The kind of int values                  */
		PRT_VALKIND_EVENT = 3,    /**< The kind of event id values             */
		PRT_VALKIND_MID = 4,    /**< The kind of (model) machine id values   */
		PRT_VALKIND_FORGN = 5,    /**< The kind of all foreign values          */
		PRT_VALKIND_TUPLE = 6,    /**< The kind of all (named) tuple values    */
		PRT_VALKIND_SEQ = 7,    /**< The kind of all sequence values         */
		PRT_VALKIND_MAP = 8,    /**< The kind of all map values              */
		PRT_VALUE_KIND_COUNT = 9, /**< The number of value kinds               */
	} PRT_VALUE_KIND;

	/** A Union type to discriminate the Prt value */
	typedef struct PRT_VALUE {
		union switch (PRT_VALUE_KIND discriminator) valueUnion
		{
		case PRT_VALKIND_NULL: PRT_UINT32 dummy_1;
		case PRT_VALKIND_BOOL: PRT_BOOLEAN bl;							/**< A boolean value            */
		case PRT_VALKIND_INT: PRT_INT32   nt;							/**< An integer value           */
		case PRT_VALKIND_EVENT: PRT_UINT32  ev;							/**< An event id value          */
		case PRT_VALKIND_MID: [unique] struct PRT_MACHINEID *mid;		/**< A (model) machine id value */
		case PRT_VALKIND_FORGN: [unique] struct PRT_FORGNVALUE *frgn;	/**< A foreign value            */
		case PRT_VALKIND_TUPLE:[unique] struct PRT_TUPVALUE *tuple;		/**< A (named) tuple value      */
		case PRT_VALKIND_SEQ:[unique] struct PRT_SEQVALUE *seq;			/**< A sequence value	        */
		case PRT_VALKIND_MAP:[unique] struct PRT_MAPVALUE *map;			/**< A map value		        */
		};
	} PRT_VALUE;

	/** The id of a (model) machine is a combination of the id of the owner process and an id unique to that process.
	*/
	typedef struct PRT_MACHINEID
	{
		PRT_GUID   processId;
		PRT_UINT32 machineId;
	} PRT_MACHINEID;

	/** A struct to node of a linked list of values. This is used when serializing values for RPC */
	typedef struct PRT_VALUE_NODE {
		PRT_VALUE *value;
		struct PRT_VALUE_NODE *nextNode;
	}PRT_VALUE_NODE;

	/** A tuple value is a (named) tuple represented as an array. */
	typedef struct PRT_TUPVALUE
	{
		PRT_UINT32 size;
		PRT_VALUE **values;					/**< Is an array of tuple args.    */
		PRT_VALUE_NODE *valuesSerialized;	/**< linked list of serialized values */
	} PRT_TUPVALUE;

	/** A sequence value is a sequence represented as a dynamic array. */
	typedef struct PRT_SEQVALUE
	{
		PRT_UINT32 size;					/**< The number of elements in the sequence. */
		PRT_UINT32 capacity;				/**< The number of elements before resizing  */
		PRT_VALUE **values;					/**< An array of values in the sequence.     */
		PRT_VALUE_NODE *valuesSerialized;  /**< linked list of serialized values used for sending values over RPC*/
	} PRT_SEQVALUE;

	/** A map value is represented as a hash-table. */
	typedef struct PRT_MAPVALUE
	{
		PRT_UINT32   size;				/**< The number of elements in the map.      */
		PRT_UINT32   capNum;			/**< An opaque number related to the number of buckets */
		struct PRT_MAPNODE *first;		/**< First element inserted into the map. */
		struct PRT_MAPNODE *last;		/**< Last element inserted into the map. */
		struct PRT_MAPNODE **buckets;	/**< An array of pointers to chained nodes.  */
	} PRT_MAPVALUE;

	/** A key-value node of a map. */
	typedef struct PRT_MAPNODE
	{
		PRT_VALUE *key;						/**< The key of this node. */
		PRT_VALUE *value;					/**< The value of this node. */
		struct PRT_MAPNODE *bucketNext;		/**< The next node in this bucket.         */
		struct PRT_MAPNODE *insertNext;		/**< The next node in insertion order.     */
		struct PRT_MAPNODE *insertPrev;		/**< The previous node in insertion order. */
	} PRT_MAPNODE;

	/** A foreign value is foreign type paired with a char *. */
	typedef struct PRT_FORGNVALUE
	{
		PRT_UINT16            typeTag;    /**< The index of the foreign type. */
		PRT_UINT64			  value;      /**< The foreign value. */
	} PRT_FORGNVALUE;
}