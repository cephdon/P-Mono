/**
* This file contains the IDL file for the types
*/

[
	uuid(a44ebb31-6600-4c90-82eb-0b9ef6756262),
	version(1.0),
	pointer_default(ptr)
]
interface PrtTypes_IDL
{
	import "PrtBaseTypes_IDL.idl";
	/** The maximum length of a field name must be smaller than this constant */
#define PRT_MAXFLDNAME_LENGTH 256

	/** Structure for representing a standard GUID */
	typedef struct PRT_GUID
	{
		PRT_UINT32 data1;   /**< 0 First data field (32 bits)  */
		PRT_UINT16 data2;   /**< 0 Second data field (16 bits) */
		PRT_UINT16 data3;   /**< 0 Third data field (16 bits)  */
		PRT_UINT64 data4;   /**< 0 Fourth data field (64 bits) */
	} PRT_GUID;

	/* Declaring the Complex PrtTypes */
	/**
	* \enum
	* These are the kinds of types in the P type system.
	**/
	typedef enum PRT_TYPE_KIND
	{
		PRT_KIND_ANY = 0,		/**< The kind of the `any` type        */
		PRT_KIND_BOOL = 1,		/**< The kind of the `bool` type       */
		PRT_KIND_EVENT = 2,		 /**< The kind of the `event` type      */
		PRT_KIND_FORGN = 3,		/**< The kind of all foreign types     */
		PRT_KIND_MACHINE = 4,   /**< The kind of the `MACHINE` type         */
		PRT_KIND_INT = 5,		/**< The kind of the `int` type        */
		PRT_KIND_MAP = 6,		/**< The kind of all map types         */
		PRT_KIND_NMDTUP = 7,   /**< The kind of all named tuple types */
		PRT_KIND_NULL = 8,	   /**< The kind of the `NULL` type		  */
		PRT_KIND_SEQ = 9,		/**< The kind of all sequence types    */
		PRT_KIND_TUPLE = 10,	/**< The kind of all tuple types       */
		PRT_TYPE_KIND_COUNT = 11,   /**< The number of type kinds        */
		PRT_TYPE_KIND_CANARY = 0xFF /**< A freed type will have this as its kind */
	} PRT_TYPE_KIND;

	/**
	* \struct
	* A type is expressed as a struct.
	* More information for complex types are stored as discriminicated union
	**/
	/** A type is expressed as a discriminicated union of all types */
	typedef union PRT_TYPE switch (PRT_TYPE_KIND typeKind) typeUnion{
	case PRT_KIND_MAP: struct PRT_MAPTYPE* map;		/**<  Map type */
	case PRT_KIND_ANY: PRT_UINT32* dummy_1;			/**<  This is a dummy field */
	case PRT_KIND_BOOL: PRT_UINT32* dummy_2;			/**<  This is a dummy field */
	case PRT_KIND_EVENT: PRT_UINT32* dummy_3;		/**<  This is a dummy field */
	case PRT_KIND_MACHINE: PRT_UINT32* dummy_4;		/**<  This is a dummy field */
	case PRT_KIND_INT: PRT_UINT32* dummy_5;			/**<  This is a dummy field */
	case PRT_KIND_NULL: PRT_UINT32* dummy_6;			/**<  This is a dummy field */
	case PRT_KIND_FORGN: PRT_UINT16 typeTag;             /**< Foreign type       */
	case PRT_KIND_NMDTUP: struct PRT_NMDTUPTYPE* nmTuple; /**<  Named Tuple type */
	case PRT_KIND_SEQ: struct PRT_SEQTYPE* seq; /**< Sequence Type */
	case PRT_KIND_TUPLE: struct PRT_TUPTYPE* tuple; /**< Tuple type		    */
	} PRT_TYPE;

	/**
	* \struct
	* The layout for map types.
	*/
	typedef struct PRT_MAPTYPE
	{
		PRT_TYPE *domType;   /**< The domain type of the map type */
		PRT_TYPE *codType;   /**< The codomain type of the map type */
	} PRT_MAPTYPE;

	/**
	* \struct
	*  node in a linked list of types. This is used for serializing the PrtTypes** for RPC
	*/
	typedef struct PRT_TYPE_NODE {
		PRT_TYPE* type;
		struct PRT_TYPE_NODE *nextNode;
	} PRT_TYPE_NODE;

	/**
	* \struct
	* node in a linked list of prt_string. This is used for serializing the PRT_STRING* for RPC
	*/
	typedef struct PRT_STRING_NODE {
		PRT_STRING name;
		struct PRT_STRING_NODE *nextNode;
	} PRT_STRING_NODE;
	/**
	* \struct
	* The layout for named tuple types.
	*/
	typedef struct PRT_NMDTUPTYPE
	{
		PRT_UINT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_STRING    *fieldNames;   /**< Array of valid field names; length = arity */
		PRT_TYPE      **fieldTypes;  /**< Array of field types; length = arity */
		PRT_TYPE_NODE *fieldTypesSerialized; /**< a linked-list of PRT_TYPE nodes, for RPC */
		PRT_STRING_NODE *fieldNamesSerialized;	 /**< a linked-list of PRT_STRING nodes, for RPC */
	} PRT_NMDTUPTYPE;

	/**
	* \struct
	* The layout for sequence types.
	*/
	typedef struct PRT_SEQTYPE
	{
		PRT_TYPE *innerType;  /**< Inner type of the sequence */
	} PRT_SEQTYPE;

	/**
	* \struct
	* The layout for tuple types.
	*/
	typedef struct PRT_TUPTYPE
	{
		PRT_UINT32    arity;         /**< Arity of tuple type; arity > 0 */
		PRT_TYPE      **fieldTypes;   /**< Array of field types; length = arity */
		PRT_TYPE_NODE *fieldTypesSerialized; /**< Linked list to store Prt_Type list*/
	} PRT_TUPTYPE;

	/**
	* \struct
	* The layout for foreign types
	*/
	typedef struct PRT_FORGNTYPE { int __dummy; } PRT_FORGNTYPE;
}