class SM_NULL { };

class MachineId
{
	static int nextMachineId = 0;

	static int GetNextId()
	{
		int ret = nextMachineId;
		nextMachineId = nextMachineId + 1;
		return ret;
	}
};

set SM_EVENT_SET SM_EVENT;

class SM_EVENT {    
    Event name;
    int maxInstances;
	bool doAssume;

    static SM_EVENT Construct(Event name, int mInstances, bool doAssume) {
		SM_EVENT smEvent = new SM_EVENT;
		smEvent.name = name;
		smEvent.maxInstances = mInstances;
		smEvent.doAssume = doAssume;
		return smEvent;
    }
};

array SM_TRANSITION_ARRAY[] SM_TRANSITION;

class SM_TRANSITION {
    SM_EVENT evt;
	ActionOrFun fun; // isPush <==> fun == ActionOrFun._default
	SM_STATE to;

	static SM_TRANSITION Construct(SM_EVENT evt, ActionOrFun fun, SM_STATE to) {
	    SM_TRANSITION transition;
		transition = new SM_TRANSITION;
		transition.evt = evt;
		transition.fun = fun;
		transition.to = to;
		return transition;
	}
};

class SM_STATE {
    State name;
	ActionOrFun entryFun;
	ActionOrFun exitFun;
	SM_TRANSITION_ARRAY transitions;
	bool hasNullTransition;
	StateTemperature temperature;

	static SM_STATE Construct(State name, ActionOrFun entryFun, ActionOrFun exitFun, int numTransitions, bool hasNullTransition, StateTemperature temperature) {
	    SM_STATE state;
		state = new SM_STATE;
		state.name = name;
		state.entryFun = entryFun;
		state.exitFun = exitFun;
		state.transitions = new SM_TRANSITION_ARRAY[numTransitions];
		state.hasNullTransition = hasNullTransition;
		state.temperature = temperature;
		return state;
	}

	SM_TRANSITION FindPushTransition(SM_EVENT evt) {
	    int i;
		i = 0;
		while (i < sizeof(transitions)) {
		    if (transitions[i].evt == evt && transitions[i].fun == ActionOrFun._default) {
			    return transitions[i];
			}
		    i = i + 1;
		}
		return null;
	}

	SM_TRANSITION FindTransition(SM_EVENT evt) {
	    int i;
		i = 0;
		while (i < sizeof(transitions)) {
		    if (transitions[i].evt == evt) {
			    return transitions[i];
			}
		    i = i + 1;
		}
		return null;
	}
};

set SM_HANDLE_SET SM_HANDLE;

class SM_HANDLE {
	static SM_HANDLE_SET halted = new SM_HANDLE_SET;
	static SM_HANDLE_SET enabled = new SM_HANDLE_SET;
	static SM_HANDLE_SET hot = new SM_HANDLE_SET;
	StateStack stack;
	Continuation cont;
	EVENT_BUFFER buffer;
	int maxBufferSize;
	Machine machineName;
	int machineId;
	int instance;
	SM_EVENT currentEvent;
    PRT_VALUE currentArg;
	SM_EVENT_SET receiveSet;

    static SM_HANDLE Construct(Machine mName, int inst, int maxBSize) {
    	SM_HANDLE handle;
		PRT_TYPE prtType;
		handle = new SM_HANDLE;
		handle.stack = null;
		handle.cont = Continuation.Construct();
		handle.buffer = EVENT_BUFFER.Construct();
		handle.maxBufferSize = maxBSize;
		handle.machineName = mName;
		handle.machineId = MachineId.GetNextId();
		handle.instance = inst;
		handle.currentEvent = null;
		prtType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
		handle.currentArg = PRT_VALUE.PrtMkDefaultValue(prtType);
		handle.receiveSet = new SM_EVENT_SET;
		return handle;
    }

    void Push() {
		StateStack s;
		s = new StateStack;
		s.next = stack;
		stack = s;
    }
    
    void Pop() {
		stack = stack.next;
    }

    void EnqueueEvent(SM_EVENT e, PRT_VALUE arg, SM_HANDLE source) {
        bool b;
		bool isEnabled;
		PRT_TYPE prtType;
    	assert(e != null, "Enqueued event must be non-null");
		//assertion to check if argument passed inhabits the payload type.
		prtType = Main.PayloadOf(e);
		if (prtType.typeKind != PRT_TYPE_KIND.PRT_KIND_NULL) 
		{
			b = PRT_VALUE.PrtInhabitsType(arg, prtType);
			assert(b, "Type of payload does not match the expected type with event");
		}
		else
		{
			assert(arg.type.typeKind == PRT_TYPE_KIND.PRT_KIND_NULL, "Type of payload does not match the expected type with event");
		}
		if (this in halted)
		{
			trace("<EnqueueLog> {0}-{1} Machine has been halted and Event {2} is dropped\n", machineName, instance, e.name);
		}
		else
		{
			if (arg != null)
			{
				trace("<EnqueueLog> Enqueued Event < {0}, ", e.name); PRT_VALUE.Print(arg); trace(" > in Machine {0}-{1} by {2}-{3}\n", machineName, instance, source.machineName, source.instance);
			}
			else
			{
				trace("<EnqueueLog> Enqueued Event < {0} > in Machine {1}-{2} by {3}-{4}\n", e.name, machineName, instance, source.machineName, source.instance);
			}

			buffer.EnqueueEvent(e, arg);
			if (maxBufferSize != -1 && buffer.eventBufferSize > maxBufferSize)
			{
				trace("<EXCEPTION> Event Buffer Size Exceeded {0} in Machine {1}-{2}\n", maxBufferSize, machineName, instance);
				assert(false);
			}
			if (this in SM_HANDLE.enabled) 
			{
			    // do nothing because cannot change the status
			} 
			else 
			{
			   	isEnabled = buffer.IsEnabled(this);
				if (isEnabled) {
					SM_HANDLE.enabled = SM_HANDLE.enabled + this;
				}
			}
			if (this in SM_HANDLE.enabled) 
			{
			   	invokescheduler("enabled", machineId, source.machineId);
			}
		}
    }
	
    void DequeueEvent(bool hasNullTransition) {
	    PRT_TYPE nullType;
		currentEvent = null;
		currentArg = null;
		while (true) {
			buffer.DequeueEvent(this);
			if (currentEvent != null) 
			{
				assert (currentArg != null, "Internal error");
				assert (this in SM_HANDLE.enabled, "Internal error");
				trace("<DequeueLog> Dequeued Event < {0}, ", currentEvent.name); PRT_VALUE.Print(currentArg); trace(" > at Machine {0}-{1}\n", machineName, instance);
				receiveSet = new SM_EVENT_SET;
				return;
			} 
			else if (hasNullTransition || (currentEvent in receiveSet)) 
			{
				assert (this in SM_HANDLE.enabled, "Internal error");
				trace("<NullTransLog> Null transition taken by Machine {0}-{1}\n", machineName, instance);
				nullType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
				currentArg = PRT_VALUE.PrtMkDefaultValue(nullType);
				FairScheduler.AtYieldStatic(this);
				FairChoice.AtYieldOrChooseStatic();
				receiveSet = new SM_EVENT_SET;
				yield;
				return;
			} 
			else 
			{
				invokescheduler("blocked", machineId);
				assume (this in SM_HANDLE.enabled);
				SM_HANDLE.enabled = SM_HANDLE.enabled - this;
				assert (sizeof(SM_HANDLE.enabled) != 0 || sizeof(SM_HANDLE.hot) == 0, "Deadlock");
				FairScheduler.AtYieldStatic(this);
				FairChoice.AtYieldOrChooseStatic();
				yield;
			}
        }
    }
};

class EVENT_NODE {
    EVENT_NODE next;
    EVENT_NODE prev;
    SM_EVENT e;
	PRT_VALUE arg;
};

class EVENT_BUFFER {
    EVENT_NODE head;
	int eventBufferSize;
    static EVENT_BUFFER Construct() {
        EVENT_BUFFER buffer;
		EVENT_NODE head;
    	head = new EVENT_NODE;
    	head.next = head;
    	head.prev = head;
    	head.e = null;
    	buffer = new EVENT_BUFFER; 
		buffer.head = head;
		buffer.eventBufferSize = 0;
		return buffer;
    }

    int CalculateInstances(SM_EVENT e) {
        EVENT_NODE elem;
		int currInstances;
		currInstances = 0;
        elem = head.next;
        while (elem != head) {
            if (elem.e.name == e.name) {
				currInstances = currInstances + 1;
			}
			elem = elem.next;
        }
		assert(currInstances <= e.maxInstances, "Internal error");
		return currInstances;
    }
	

    void EnqueueEvent(SM_EVENT e, PRT_VALUE arg) {
        EVENT_NODE elem;
		int currInstances;
	
		if (e.maxInstances == -1)
		{
			elem = new EVENT_NODE;
			elem.e = e;
			elem.arg = arg;
			elem.prev = head.prev;
			elem.next = head;
			elem.prev.next = elem;    
			elem.next.prev = elem;
			eventBufferSize = eventBufferSize + 1;
		}
		else
		{
			currInstances = CalculateInstances(e);
			if (currInstances == e.maxInstances)
			{
				if (e.doAssume)
				{
					assume(false);
				}
				else
				{
					trace("<Exception> Attempting to enqueue event {0} more than max instance of {1}\n", e.name, e.maxInstances);
					assert(false);
				}
			}
			else
			{
    			elem = new EVENT_NODE;
    			elem.e = e;
				elem.arg = arg;
    			elem.prev = head.prev;
    			elem.next = head;
    			elem.prev.next = elem;    
    			elem.next.prev = elem;
				eventBufferSize = eventBufferSize + 1;
			}
		}
	}

    void DequeueEvent(SM_HANDLE owner) {
    	SM_EVENT_SET deferredSet;
		SM_EVENT_SET receiveSet;
        EVENT_NODE iter;
		bool doDequeue;

		deferredSet = owner.stack.deferredSet;
		receiveSet = owner.receiveSet;
        iter = head.next;
        while (iter != head) {
		    if (sizeof(receiveSet) == 0) {
				doDequeue = !(iter.e in deferredSet);
			} else {
				doDequeue = iter.e in receiveSet;
			}
			if (doDequeue) 
			{
				iter.next.prev = iter.prev;
				iter.prev.next = iter.next;
				owner.currentEvent = iter.e;
				owner.currentArg = iter.arg;
				eventBufferSize = eventBufferSize - 1;
				return;
			} 
			iter = iter.next;
        }
		return;
    }

    bool IsEnabled(SM_HANDLE owner) {
        EVENT_NODE iter;
		SM_EVENT_SET deferredSet;
		SM_EVENT_SET receiveSet;
		bool enabled;

		deferredSet = owner.stack.deferredSet;
		receiveSet = owner.receiveSet;
        iter = head.next;
        while (iter != head) {
			if (sizeof(receiveSet) == 0)
			{
				enabled = !(iter.e in deferredSet);
			}
			else 
			{
				enabled = iter.e in receiveSet; 
			}
			if (enabled)
			{
				return true;
			}
			iter = iter.next;
        }
		return false;
    }
};

array SM_EVENT_ARRAY[] SM_EVENT;
array ActionOrFun_ARRAY[] ActionOrFun;

class StateStack {
    SM_STATE state;
    SM_EVENT_SET deferredSet;
    SM_EVENT_SET actionSet;
    SM_EVENT_ARRAY es;
    ActionOrFun_ARRAY as;
    StateStack next;

    ActionOrFun Find(SM_EVENT f) {
        ActionOrFun af;
        int i = 0;
		while (i < sizeof(es)) {
			if (es[i] == f) {
				return as[i];
			} else {
				i = i + 1;
			}
		}
		af = next.Find(f);
		return af;
    }

    void AddStackDeferredSet(SM_EVENT_SET localDeferredSet) {
        if (next == null)
			return;
		localDeferredSet = localDeferredSet + next.deferredSet;
    }

    void AddStackActionSet(SM_EVENT_SET localActionSet) {
        if (next == null)
			return;
		localActionSet = localActionSet + next.actionSet;
    }

	bool HasNullTransitionOrAction() {
		if (state.hasNullTransition) return true;
		return (Main.null_SM_EVENT in actionSet);
	}
};

enum ContinuationReason { Return, Nondet, Pop, Raise, Receive, Send, NewMachine };

class StackFrame {
    int pc;
	PRT_VALUE_ARRAY locals;
	StackFrame next;
};

class Continuation {
    StackFrame returnTo;
    ContinuationReason reason;
    SM_HANDLE id;
    PRT_VALUE retVal;

    // The nondet field is different from the fields above because it is used 
    // by ReentrancyHelper to pass the choice to the nondet choice point.
    // Therefore, nondet should not be reinitialized in this class.
    bool nondet;

    static Continuation Construct() {
        Continuation res;
		res = new Continuation;
		res.returnTo = null;
		res.reason = ContinuationReason.Return;
		res.id = null;
		res.retVal = null;
		res.nondet = false;
		return res;
    }

	void Reset() {
		this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		this.retVal = null;
		this.nondet = false;
    }

    StackFrame PopReturnTo() {
        StackFrame topOfStack;
		topOfStack = this.returnTo;
		this.returnTo = topOfStack.next;
		topOfStack.next = null;
		return topOfStack;
    }

    void PushReturnTo(int ret, PRT_VALUE_ARRAY locals) {
        StackFrame tmp;
		tmp = new StackFrame;
		tmp.pc = ret;
		tmp.locals = locals;
		tmp.next = this.returnTo;
		this.returnTo = tmp;
    }

    void Return() {
    	PRT_TYPE nullType;
        this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		nullType = PRT_TYPE.PrtMkPrimitiveType(PRT_TYPE_KIND.PRT_KIND_NULL);
		this.retVal = PRT_VALUE.PrtMkDefaultValue(nullType);
    }

    void ReturnVal(PRT_VALUE val) {
        this.returnTo = null;
		this.reason = ContinuationReason.Return;
		this.id = null;
		this.retVal = val;
    }

    void Pop() {
        this.returnTo = null;
		this.reason = ContinuationReason.Pop;
		this.id = null;
		this.retVal = null;
    }

    void Raise() {
        this.returnTo = null;
		this.reason = ContinuationReason.Raise;
		this.id = null;
		this.retVal = null;
    }

    void Send(int ret, PRT_VALUE_ARRAY locals) {
        this.returnTo = null;
		this.reason = ContinuationReason.Send;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals);
    }

    void NewMachine(int ret, PRT_VALUE_ARRAY locals, SM_HANDLE o) {
        this.returnTo = null;
		this.reason = ContinuationReason.NewMachine;
		this.id = o;
		this.retVal = null;
		this.PushReturnTo(ret, locals);
    }

    void Receive(int ret, PRT_VALUE_ARRAY locals) {
        this.returnTo = null;
		this.reason = ContinuationReason.Receive;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals);
    }

    void Nondet(int ret, PRT_VALUE_ARRAY locals) {
        this.returnTo = null;
		this.reason = ContinuationReason.Nondet;
		this.id = null;
		this.retVal = null;
		this.PushReturnTo(ret, locals);
    }
};

// Add an instance of FairScheduler per running P machine.
// Add an instance of FairChoice per running P machine and fair choice in that machine.
// Invoke FairScheduler.AtYieldStatic and FairChoice.AtYieldOrChooseStatic at each yield.
// Invoke FairScheduler.AtChooseStatic and FairChoice.AtYieldOrChooseStatic at each choose.
set FairSchedulers FairScheduler;
class FairScheduler {      
    static FairSchedulers all = new FairSchedulers;
    static FairSchedulers accepted = new FairSchedulers;
    static bool noYieldFromNowOn = false;
    SM_HANDLE handle;

    static void Init(FairScheduler fs, SM_HANDLE h) {
		fs.handle = h;
		all = all + fs;
    }

    void AtYield(SM_HANDLE running) {
		assume (!noYieldFromNowOn);
		if (running == handle || !(handle in SM_HANDLE.enabled)) {
		   FairScheduler.accepted = FairScheduler.accepted + this;
		   FairCycle.Accept();
		}
    }

    static void AtYieldStatic(SM_HANDLE running) {
		foreach (FairScheduler m in all) {
			m.AtYield(running);
		}
    }

    static void AtChooseStatic() {
    	if (noYieldFromNowOn) {
			FairCycle.Accept();
			return;
		}
		noYieldFromNowOn = choose(bool);
		if (noYieldFromNowOn) {
			FairScheduler.all = new FairSchedulers;
			FairScheduler.accepted = new FairSchedulers;
		}
    }
};

set FairChoices FairChoice;
class FairChoice {
    static FairChoices all = new FairChoices;
    static FairChoices accepted = new FairChoices;
    bool lastChoice;

    static void Init(FairChoice fs) {
		fs.lastChoice = false;
		all = all + fs;
    }

    void AtYieldOrChoose() {
        bool b;
		b = choose(bool);
      	if (b) {
			FairChoice.all = FairChoice.all - this;
		}
    }
    
    static void AtYieldOrChooseStatic() {
		foreach (FairChoice m in all) {
			m.AtYieldOrChoose();
		}
    }

    void AtChoose(bool b) {
        assume (this in FairChoice.all);
        if (b != lastChoice) {
			lastChoice = b;
			FairChoice.accepted = FairChoice.accepted + this;
			FairCycle.Accept();
		}
    }
};

enum GateStatus { Init, Selected, Closed };
enum StateTemperature { Cold, Warm, Hot };

class FairCycle {
    static GateStatus gate = GateStatus.Init;
	static StateTemperature temperature = StateTemperature.Warm;

    static void GateProgress() {
        bool b;
        if (gate == GateStatus.Selected) {
			b = choose(bool);
			if (b) {
				gate = GateStatus.Closed;
			}
		}
    }

    static void Accept() {
        if (gate == GateStatus.Closed && 
			temperature == StateTemperature.Hot &&
			sizeof(FairChoice.accepted) == sizeof(FairChoice.all) && 
       	    sizeof(FairScheduler.accepted) == sizeof(FairScheduler.all))
		{
			trace("Accepting transition\n");
			accept(true);
      		FairChoice.accepted = new FairChoices;
			FairScheduler.accepted = new FairSchedulers;
		}	
    }

	static int Choose(int n) {
	    int i;
		bool b;
		assert (0 < n, "Internal error");
		i = 0;
		while (i < n) {
		    b = choose(bool);
			if (b) {
			    return i;
			} else {
			    i = i + 1;
			}
		}
		assume (false);
	}
};
