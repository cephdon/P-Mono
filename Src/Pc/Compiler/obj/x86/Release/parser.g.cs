// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.1
// Machine:  Cambridge Yang
// DateTime: 3/7/2016 7:19:08 PM
// UserName: jianqiaoyang
// Input file <../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y - 3/7/2016 4:53:21 PM>

// options: babel conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Microsoft.Pc.Domains;

namespace Microsoft.Pc.Parser
{
internal enum Tokens {
    error=1,EOF=2,INT=3,BOOL=4,ANY=5,SEQ=6,
    MAP=7,ID=8,TYPE=9,INCLUDE=10,MAIN=11,EVENT=12,
    MACHINE=13,MONITOR=14,ASSUME=15,SPEC=16,VAR=17,START=18,
    HOT=19,COLD=20,MODEL=21,STATE=22,FUN=23,ACTION=24,
    GROUP=25,STATIC=26,MODELS=27,MONITORS=28,ENTRY=29,EXIT=30,
    DEFER=31,IGNORE=32,GOTO=33,ON=34,DO=35,PUSH=36,
    AS=37,WITH=38,IF=39,WHILE=40,THIS=41,NEW=42,
    RETURN=43,POP=44,ASSERT=45,PRINT=46,CALL=47,RAISE=48,
    SEND=49,DEFAULT=50,FRESH=51,HALT=52,NULL=53,RECEIVE=54,
    CASE=55,LPAREN=56,RPAREN=57,LCBRACE=58,RCBRACE=59,LBRACKET=60,
    RBRACKET=61,SIZEOF=62,KEYS=63,VALUES=64,TRUE=65,FALSE=66,
    ASSIGN=67,REMOVE=68,INSERT=69,EQ=70,NE=71,LT=72,
    GT=73,LE=74,GE=75,IN=76,LAND=77,LNOT=78,
    LOR=79,NONDET=80,FAIRNONDET=81,DOT=82,COLON=83,COMMA=84,
    SEMICOLON=85,STR=86,PLUS=87,MINUS=88,DIV=89,MUL=90,
    ELSE=91,maxParseToken=92,LEX_WHITE=93,LEX_ERROR=94,LEX_COMMENT=95};

internal partial struct LexValue
#line 7 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
       {
	public string str;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.1")]
internal abstract class ScanBase : AbstractScanner<LexValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.1")]
internal class ScanObj {
  public int token;
  public LexValue yylval;
  public LexLocation yylloc;
  public ScanObj( int t, LexValue val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.1")]
internal partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[223];
  private static State[] states = new State[474];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "TopDeclList", "AnnotationSet", "TopDecl", "IncludeDecl", 
      "TypeDefDecl", "EventDecl", "MachineDecl", "StaticFunDecl", "AnnotationList", 
      "Annotation", "Type", "EvCardOrNone", "EvTypeOrNone", "EventAnnotOrNone", 
      "IsMain", "MachCardOrNone", "MachAnnotOrNone", "MachineBody", "ObservesList", 
      "EventList", "MachineBodyItem", "VarDecl", "FunDecl", "StateDecl", "Group", 
      "VarList", "LocalVarDecl", "LocalVarList", "LocalVarDeclList", "PayloadVarDeclOrNone", 
      "Static", "IsModel", "ParamsOrNone", "RetTypeOrNone", "FunAnnotOrNone", 
      "StmtBlock", "NmdTupTypeList", "GroupName", "GroupBody", "GroupItem", "IsHotOrColdOrNone", 
      "StateAnnotOrNone", "StateBody", "StateBodyItem", "NonDefaultEventList", 
      "TrigAnnotOrNone", "OnEventList", "StateTarget", "NonDefaultEventId", "EventId", 
      "TupTypeList", "Stmt", "StmtList", "Exp", "SingleExprArgList", "ExprArgList", 
      "ReceiveStmt", "CaseList", "Case", "CaseEventList", "Exp_8", "Exp_7", "Exp_6", 
      "Exp_5", "Exp_4", "Exp_3", "Exp_2", "Exp_1", "Exp_0", "NmdExprArgList", 
      };

  static Parser() {
    states[0] = new State(new int[]{2,3,10,7,9,10,12,48,11,449,16,450,26,470,60,55,13,-38,21,-38},new int[]{-1,1,-3,4,-5,471,-6,6,-7,9,-8,47,-9,75,-17,76,-10,459,-33,460,-4,472});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{10,7,9,10,12,48,11,449,16,450,26,470,2,-3,13,-38,21,-38},new int[]{-5,5,-6,6,-7,9,-8,47,-9,75,-17,76,-10,459,-33,460});
    states[5] = new State(-7);
    states[6] = new State(-8);
    states[7] = new State(new int[]{86,8});
    states[8] = new State(-24);
    states[9] = new State(-9);
    states[10] = new State(new int[]{8,11});
    states[11] = new State(new int[]{85,12,67,13});
    states[12] = new State(-22);
    states[13] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,14});
    states[14] = new State(new int[]{85,15});
    states[15] = new State(-23);
    states[16] = new State(-114);
    states[17] = new State(-115);
    states[18] = new State(-116);
    states[19] = new State(-117);
    states[20] = new State(-118);
    states[21] = new State(-119);
    states[22] = new State(-120);
    states[23] = new State(new int[]{60,24});
    states[24] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,25});
    states[25] = new State(new int[]{61,26});
    states[26] = new State(-121);
    states[27] = new State(new int[]{60,28});
    states[28] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,29});
    states[29] = new State(new int[]{84,30});
    states[30] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,31});
    states[31] = new State(new int[]{61,32});
    states[32] = new State(-122);
    states[33] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,41,6,23,7,27,56,33},new int[]{-53,34,-39,36,-13,38});
    states[34] = new State(new int[]{57,35});
    states[35] = new State(-123);
    states[36] = new State(new int[]{57,37});
    states[37] = new State(-124);
    states[38] = new State(new int[]{84,39,57,-125});
    states[39] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-53,40,-13,38});
    states[40] = new State(-126);
    states[41] = new State(new int[]{83,42,84,-120,57,-120});
    states[42] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,43});
    states[43] = new State(new int[]{84,44,57,-127});
    states[44] = new State(new int[]{8,46},new int[]{-39,45});
    states[45] = new State(-128);
    states[46] = new State(new int[]{83,42});
    states[47] = new State(-10);
    states[48] = new State(new int[]{8,49});
    states[49] = new State(new int[]{45,71,15,73,83,-28,60,-28,85,-28},new int[]{-14,50});
    states[50] = new State(new int[]{83,69,60,-30,85,-30},new int[]{-15,51});
    states[51] = new State(new int[]{60,55,85,-32},new int[]{-16,52,-4,54});
    states[52] = new State(new int[]{85,53});
    states[53] = new State(-25);
    states[54] = new State(-31);
    states[55] = new State(new int[]{61,56,8,61},new int[]{-11,57,-12,68});
    states[56] = new State(-13);
    states[57] = new State(new int[]{61,58,84,59});
    states[58] = new State(-14);
    states[59] = new State(new int[]{8,61},new int[]{-12,60});
    states[60] = new State(-16);
    states[61] = new State(new int[]{67,62});
    states[62] = new State(new int[]{53,63,65,64,66,65,8,66,3,67});
    states[63] = new State(-17);
    states[64] = new State(-18);
    states[65] = new State(-19);
    states[66] = new State(-20);
    states[67] = new State(-21);
    states[68] = new State(-15);
    states[69] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,70});
    states[70] = new State(-29);
    states[71] = new State(new int[]{3,72});
    states[72] = new State(-26);
    states[73] = new State(new int[]{3,74});
    states[74] = new State(-27);
    states[75] = new State(-11);
    states[76] = new State(new int[]{13,77,21,442});
    states[77] = new State(new int[]{8,78});
    states[78] = new State(new int[]{45,438,15,440,60,-41,58,-41},new int[]{-18,79});
    states[79] = new State(new int[]{60,55,58,-43},new int[]{-19,80,-4,437});
    states[80] = new State(new int[]{58,81});
    states[81] = new State(new int[]{17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-20,82,-23,436,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[82] = new State(new int[]{59,83,17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-23,84,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[83] = new State(-33);
    states[84] = new State(-45);
    states[85] = new State(-46);
    states[86] = new State(new int[]{8,93},new int[]{-28,87});
    states[87] = new State(new int[]{83,88});
    states[88] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,89});
    states[89] = new State(new int[]{85,90,60,55},new int[]{-4,91});
    states[90] = new State(-50);
    states[91] = new State(new int[]{85,92});
    states[92] = new State(-51);
    states[93] = new State(new int[]{84,94,83,-52});
    states[94] = new State(new int[]{8,93},new int[]{-28,95});
    states[95] = new State(-53);
    states[96] = new State(-47);
    states[97] = new State(new int[]{23,98});
    states[98] = new State(new int[]{8,99});
    states[99] = new State(new int[]{56,337},new int[]{-35,100});
    states[100] = new State(new int[]{83,335,60,-71,58,-71},new int[]{-36,101});
    states[101] = new State(new int[]{60,55,58,-67},new int[]{-37,102,-4,334});
    states[102] = new State(new int[]{58,103});
    states[103] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,104,-31,106,-29,308});
    states[104] = new State(new int[]{59,105});
    states[105] = new State(-63);
    states[106] = new State(new int[]{85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333,59,-160},new int[]{-55,107,-54,108,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[107] = new State(-161);
    states[108] = new State(new int[]{85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333,59,-162},new int[]{-55,109,-54,108,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[109] = new State(-163);
    states[110] = new State(-129);
    states[111] = new State(new int[]{59,112,85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333},new int[]{-55,113,-54,108,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[112] = new State(-130);
    states[113] = new State(new int[]{59,114});
    states[114] = new State(-132);
    states[115] = new State(new int[]{85,116});
    states[116] = new State(-131);
    states[117] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,118,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[118] = new State(new int[]{85,119,84,120});
    states[119] = new State(-133);
    states[120] = new State(new int[]{86,121});
    states[121] = new State(new int[]{85,122});
    states[122] = new State(-134);
    states[123] = new State(new int[]{79,124,67,-166,68,-166,69,-166,85,-166,84,-166,61,-166,57,-166});
    states[124] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-64,125,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[125] = new State(new int[]{77,126,79,-167,67,-167,68,-167,69,-167,85,-167,84,-167,61,-167,57,-167});
    states[126] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-65,127,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[127] = new State(-169);
    states[128] = new State(new int[]{70,129,71,232,77,-173,79,-173,67,-173,68,-173,69,-173,85,-173,84,-173,61,-173,57,-173});
    states[129] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-66,130,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[130] = new State(-171);
    states[131] = new State(new int[]{72,132,37,134,74,224,73,226,75,228,76,230,70,-179,71,-179,77,-179,79,-179,67,-179,68,-179,69,-179,85,-179,84,-179,61,-179,57,-179});
    states[132] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-67,133,-68,136,-69,151,-70,172,-71,173});
    states[133] = new State(new int[]{37,134,70,-174,71,-174,77,-174,79,-174,67,-174,68,-174,69,-174,85,-174,84,-174,61,-174,57,-174});
    states[134] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,135});
    states[135] = new State(-180);
    states[136] = new State(new int[]{87,137,88,222,72,-181,37,-181,74,-181,73,-181,75,-181,76,-181,70,-181,71,-181,77,-181,79,-181,67,-181,68,-181,69,-181,85,-181,84,-181,61,-181,57,-181});
    states[137] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-69,138,-70,172,-71,173});
    states[138] = new State(new int[]{90,139,89,152,87,-182,88,-182,72,-182,37,-182,74,-182,73,-182,75,-182,76,-182,70,-182,71,-182,77,-182,79,-182,67,-182,68,-182,69,-182,85,-182,84,-182,61,-182,57,-182});
    states[139] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-70,140,-71,173});
    states[140] = new State(-185);
    states[141] = new State(new int[]{65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-71,142});
    states[142] = new State(new int[]{82,143,60,146,90,-188,89,-188,87,-188,88,-188,72,-188,37,-188,74,-188,73,-188,75,-188,76,-188,70,-188,71,-188,77,-188,79,-188,67,-188,68,-188,69,-188,85,-188,84,-188,61,-188,57,-188});
    states[143] = new State(new int[]{8,144,3,145});
    states[144] = new State(-200);
    states[145] = new State(-201);
    states[146] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,147,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[147] = new State(new int[]{61,148});
    states[148] = new State(-202);
    states[149] = new State(new int[]{77,126,79,-168,67,-168,68,-168,69,-168,85,-168,84,-168,61,-168,57,-168});
    states[150] = new State(-170);
    states[151] = new State(new int[]{90,139,89,152,87,-184,88,-184,72,-184,37,-184,74,-184,73,-184,75,-184,76,-184,70,-184,71,-184,77,-184,79,-184,67,-184,68,-184,69,-184,85,-184,84,-184,61,-184,57,-184});
    states[152] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-70,153,-71,173});
    states[153] = new State(-186);
    states[154] = new State(new int[]{65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-71,155});
    states[155] = new State(new int[]{82,143,60,146,90,-189,89,-189,87,-189,88,-189,72,-189,37,-189,74,-189,73,-189,75,-189,76,-189,70,-189,71,-189,77,-189,79,-189,67,-189,68,-189,69,-189,85,-189,84,-189,61,-189,57,-189});
    states[156] = new State(-191);
    states[157] = new State(-192);
    states[158] = new State(-193);
    states[159] = new State(-194);
    states[160] = new State(-195);
    states[161] = new State(-196);
    states[162] = new State(-197);
    states[163] = new State(-198);
    states[164] = new State(new int[]{56,165,82,-199,60,-199,90,-199,89,-199,87,-199,88,-199,72,-199,37,-199,74,-199,73,-199,75,-199,76,-199,70,-199,71,-199,77,-199,79,-199,85,-199,84,-199,67,-199,68,-199,69,-199,61,-199,57,-199});
    states[165] = new State(new int[]{57,166,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-58,167,-56,169,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[166] = new State(-213);
    states[167] = new State(new int[]{57,168});
    states[168] = new State(-214);
    states[169] = new State(new int[]{84,170,57,-219});
    states[170] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-58,171,-56,169,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[171] = new State(-220);
    states[172] = new State(-187);
    states[173] = new State(new int[]{82,143,60,146,90,-190,89,-190,87,-190,88,-190,72,-190,37,-190,74,-190,73,-190,75,-190,76,-190,70,-190,71,-190,77,-190,79,-190,67,-190,68,-190,69,-190,85,-190,84,-190,61,-190,57,-190});
    states[174] = new State(new int[]{8,210,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,175,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[175] = new State(new int[]{57,176,84,177});
    states[176] = new State(-203);
    states[177] = new State(new int[]{57,178,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-58,179,-56,169,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[178] = new State(-211);
    states[179] = new State(new int[]{57,180});
    states[180] = new State(-212);
    states[181] = new State(new int[]{56,182});
    states[182] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,183,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[183] = new State(new int[]{57,184});
    states[184] = new State(-204);
    states[185] = new State(new int[]{56,186});
    states[186] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,187,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[187] = new State(new int[]{57,188});
    states[188] = new State(-205);
    states[189] = new State(new int[]{56,190});
    states[190] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,191,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[191] = new State(new int[]{57,192});
    states[192] = new State(-206);
    states[193] = new State(new int[]{56,194});
    states[194] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,195});
    states[195] = new State(new int[]{57,196});
    states[196] = new State(-207);
    states[197] = new State(new int[]{56,198});
    states[198] = new State(new int[]{8,199});
    states[199] = new State(new int[]{57,200});
    states[200] = new State(-208);
    states[201] = new State(new int[]{8,202});
    states[202] = new State(new int[]{56,203});
    states[203] = new State(new int[]{57,204,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,205,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[204] = new State(-209);
    states[205] = new State(new int[]{57,206});
    states[206] = new State(-210);
    states[207] = new State(new int[]{84,208,57,-217,85,-217});
    states[208] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,209,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[209] = new State(-218);
    states[210] = new State(new int[]{67,211,56,165,82,-199,60,-199,90,-199,89,-199,87,-199,88,-199,72,-199,37,-199,74,-199,73,-199,75,-199,76,-199,70,-199,71,-199,77,-199,79,-199,57,-199,84,-199});
    states[211] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,212,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[212] = new State(new int[]{84,213});
    states[213] = new State(new int[]{57,214,8,217},new int[]{-72,215});
    states[214] = new State(-215);
    states[215] = new State(new int[]{57,216});
    states[216] = new State(-216);
    states[217] = new State(new int[]{67,218});
    states[218] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,219,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[219] = new State(new int[]{84,220,57,-221});
    states[220] = new State(new int[]{8,217},new int[]{-72,221});
    states[221] = new State(-222);
    states[222] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-69,223,-70,172,-71,173});
    states[223] = new State(new int[]{90,139,89,152,87,-183,88,-183,72,-183,37,-183,74,-183,73,-183,75,-183,76,-183,70,-183,71,-183,77,-183,79,-183,67,-183,68,-183,69,-183,85,-183,84,-183,61,-183,57,-183});
    states[224] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-67,225,-68,136,-69,151,-70,172,-71,173});
    states[225] = new State(new int[]{37,134,70,-175,71,-175,77,-175,79,-175,67,-175,68,-175,69,-175,85,-175,84,-175,61,-175,57,-175});
    states[226] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-67,227,-68,136,-69,151,-70,172,-71,173});
    states[227] = new State(new int[]{37,134,70,-176,71,-176,77,-176,79,-176,67,-176,68,-176,69,-176,85,-176,84,-176,61,-176,57,-176});
    states[228] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-67,229,-68,136,-69,151,-70,172,-71,173});
    states[229] = new State(new int[]{37,134,70,-177,71,-177,77,-177,79,-177,67,-177,68,-177,69,-177,85,-177,84,-177,61,-177,57,-177});
    states[230] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-67,231,-68,136,-69,151,-70,172,-71,173});
    states[231] = new State(new int[]{37,134,70,-178,71,-178,77,-178,79,-178,67,-178,68,-178,69,-178,85,-178,84,-178,61,-178,57,-178});
    states[232] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-66,233,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[233] = new State(-172);
    states[234] = new State(new int[]{86,235});
    states[235] = new State(new int[]{85,236});
    states[236] = new State(-135);
    states[237] = new State(new int[]{85,238,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,239,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[238] = new State(-136);
    states[239] = new State(new int[]{85,240});
    states[240] = new State(-137);
    states[241] = new State(new int[]{67,242,68,245,69,248});
    states[242] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,243,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[243] = new State(new int[]{85,244});
    states[244] = new State(-138);
    states[245] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,246,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[246] = new State(new int[]{85,247});
    states[247] = new State(-139);
    states[248] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,249,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[249] = new State(new int[]{85,250});
    states[250] = new State(-140);
    states[251] = new State(new int[]{56,252,82,-199,60,-199,90,-199,89,-199,87,-199,88,-199,72,-199,37,-199,74,-199,73,-199,75,-199,76,-199,70,-199,71,-199,77,-199,79,-199,67,-199,68,-199,69,-199});
    states[252] = new State(new int[]{57,253,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-58,255,-56,169,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[253] = new State(new int[]{85,254,82,-213,60,-213,90,-213,89,-213,87,-213,88,-213,72,-213,37,-213,74,-213,73,-213,75,-213,76,-213,70,-213,71,-213,77,-213,79,-213,67,-213,68,-213,69,-213});
    states[254] = new State(-146);
    states[255] = new State(new int[]{57,256});
    states[256] = new State(new int[]{85,257,82,-214,60,-214,90,-214,89,-214,87,-214,88,-214,72,-214,37,-214,74,-214,73,-214,75,-214,76,-214,70,-214,71,-214,77,-214,79,-214,67,-214,68,-214,69,-214});
    states[257] = new State(-147);
    states[258] = new State(new int[]{8,259});
    states[259] = new State(new int[]{56,260});
    states[260] = new State(new int[]{57,261,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,263,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[261] = new State(new int[]{85,262,82,-209,60,-209,90,-209,89,-209,87,-209,88,-209,72,-209,37,-209,74,-209,73,-209,75,-209,76,-209,70,-209,71,-209,77,-209,79,-209,67,-209,68,-209,69,-209});
    states[262] = new State(-144);
    states[263] = new State(new int[]{57,264});
    states[264] = new State(new int[]{85,265,82,-210,60,-210,90,-210,89,-210,87,-210,88,-210,72,-210,37,-210,74,-210,73,-210,75,-210,76,-210,70,-210,71,-210,77,-210,79,-210,67,-210,68,-210,69,-210});
    states[265] = new State(-145);
    states[266] = new State(new int[]{56,267});
    states[267] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,268,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[268] = new State(new int[]{57,269});
    states[269] = new State(new int[]{85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333},new int[]{-54,270,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[270] = new State(-141);
    states[271] = new State(new int[]{56,272});
    states[272] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,273,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[273] = new State(new int[]{57,274});
    states[274] = new State(new int[]{85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333},new int[]{-54,275,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[275] = new State(new int[]{91,276,85,-143,58,-143,44,-143,45,-143,46,-143,43,-143,88,-143,78,-143,65,-143,66,-143,41,-143,80,-143,81,-143,53,-143,52,-143,3,-143,8,-143,56,-143,63,-143,64,-143,62,-143,50,-143,51,-143,42,-143,40,-143,39,-143,48,-143,49,-143,14,-143,54,-143,59,-143});
    states[276] = new State(new int[]{85,110,58,111,44,115,45,117,46,234,43,237,88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,251,56,174,63,181,64,185,62,189,50,193,51,197,42,258,40,266,39,271,48,278,49,284,14,292,54,333},new int[]{-54,277,-56,241,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173,-59,298});
    states[277] = new State(-142);
    states[278] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,279,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[279] = new State(new int[]{85,280,84,281});
    states[280] = new State(-148);
    states[281] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,282,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[282] = new State(new int[]{85,283});
    states[283] = new State(-149);
    states[284] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,285,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[285] = new State(new int[]{84,286});
    states[286] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,287,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[287] = new State(new int[]{85,288,84,289});
    states[288] = new State(-150);
    states[289] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,290,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[290] = new State(new int[]{85,291});
    states[291] = new State(-151);
    states[292] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-56,293,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[293] = new State(new int[]{85,294,84,295});
    states[294] = new State(-152);
    states[295] = new State(new int[]{88,141,78,154,65,156,66,157,41,158,80,159,81,160,53,161,52,162,3,163,8,164,56,174,63,181,64,185,62,189,50,193,51,197,42,201},new int[]{-57,296,-56,207,-63,123,-64,149,-65,150,-66,128,-67,131,-68,136,-69,151,-70,172,-71,173});
    states[296] = new State(new int[]{85,297});
    states[297] = new State(-153);
    states[298] = new State(new int[]{58,299});
    states[299] = new State(new int[]{55,323},new int[]{-60,300,-61,332,-62,303});
    states[300] = new State(new int[]{59,301,55,323},new int[]{-61,302,-62,303});
    states[301] = new State(-154);
    states[302] = new State(-159);
    states[303] = new State(new int[]{56,318,58,-60},new int[]{-32,304});
    states[304] = new State(new int[]{58,305});
    states[305] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,306,-31,106,-29,308});
    states[306] = new State(new int[]{59,307});
    states[307] = new State(-156);
    states[308] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-31,309,-29,308});
    states[309] = new State(-55);
    states[310] = new State(new int[]{8,317},new int[]{-30,311});
    states[311] = new State(new int[]{83,312,84,315});
    states[312] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,313});
    states[313] = new State(new int[]{85,314});
    states[314] = new State(-54);
    states[315] = new State(new int[]{8,316});
    states[316] = new State(-58);
    states[317] = new State(-57);
    states[318] = new State(new int[]{8,319});
    states[319] = new State(new int[]{83,320});
    states[320] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,321});
    states[321] = new State(new int[]{57,322});
    states[322] = new State(-59);
    states[323] = new State(new int[]{8,328,52,329,53,330},new int[]{-22,324,-52,331});
    states[324] = new State(new int[]{83,325,84,326});
    states[325] = new State(-157);
    states[326] = new State(new int[]{8,328,52,329,53,330},new int[]{-52,327});
    states[327] = new State(-106);
    states[328] = new State(-107);
    states[329] = new State(-108);
    states[330] = new State(-109);
    states[331] = new State(-105);
    states[332] = new State(-158);
    states[333] = new State(-155);
    states[334] = new State(-66);
    states[335] = new State(new int[]{53,16,4,17,3,18,12,19,13,20,5,21,8,22,6,23,7,27,56,33},new int[]{-13,336});
    states[336] = new State(-70);
    states[337] = new State(new int[]{57,338,8,46},new int[]{-39,339});
    states[338] = new State(-68);
    states[339] = new State(new int[]{57,340});
    states[340] = new State(-69);
    states[341] = new State(-64);
    states[342] = new State(-48);
    states[343] = new State(new int[]{22,344});
    states[344] = new State(new int[]{8,345});
    states[345] = new State(new int[]{60,55,58,-87},new int[]{-44,346,-4,412});
    states[346] = new State(new int[]{58,347});
    states[347] = new State(new int[]{59,348,29,353,30,360,31,366,32,376,34,410},new int[]{-45,349,-46,351,-49,380});
    states[348] = new State(-79);
    states[349] = new State(new int[]{59,350});
    states[350] = new State(-80);
    states[351] = new State(new int[]{29,353,30,360,31,366,32,376,34,410,59,-88},new int[]{-45,352,-46,351,-49,380});
    states[352] = new State(-89);
    states[353] = new State(new int[]{8,358,56,318,58,-60},new int[]{-32,354});
    states[354] = new State(new int[]{58,355});
    states[355] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,356,-31,106,-29,308});
    states[356] = new State(new int[]{59,357});
    states[357] = new State(-90);
    states[358] = new State(new int[]{85,359});
    states[359] = new State(-91);
    states[360] = new State(new int[]{58,361,8,364});
    states[361] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,362,-31,106,-29,308});
    states[362] = new State(new int[]{59,363});
    states[363] = new State(-92);
    states[364] = new State(new int[]{85,365});
    states[365] = new State(-93);
    states[366] = new State(new int[]{8,372,52,373},new int[]{-47,367,-51,375});
    states[367] = new State(new int[]{84,370,60,55,85,-113},new int[]{-48,368,-4,374});
    states[368] = new State(new int[]{85,369});
    states[369] = new State(-94);
    states[370] = new State(new int[]{8,372,52,373},new int[]{-51,371});
    states[371] = new State(-104);
    states[372] = new State(-110);
    states[373] = new State(-111);
    states[374] = new State(-112);
    states[375] = new State(-103);
    states[376] = new State(new int[]{8,372,52,373},new int[]{-47,377,-51,375});
    states[377] = new State(new int[]{84,370,60,55,85,-113},new int[]{-48,378,-4,374});
    states[378] = new State(new int[]{85,379});
    states[379] = new State(-95);
    states[380] = new State(new int[]{35,381,36,391,33,398});
    states[381] = new State(new int[]{8,382,60,55,56,-113,58,-113},new int[]{-48,385,-4,374});
    states[382] = new State(new int[]{60,55,85,-113},new int[]{-48,383,-4,374});
    states[383] = new State(new int[]{85,384});
    states[384] = new State(-96);
    states[385] = new State(new int[]{56,318,58,-60},new int[]{-32,386});
    states[386] = new State(new int[]{58,387});
    states[387] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,388,-31,106,-29,308});
    states[388] = new State(new int[]{59,389});
    states[389] = new State(new int[]{85,390});
    states[390] = new State(-97);
    states[391] = new State(new int[]{8,397},new int[]{-50,392});
    states[392] = new State(new int[]{82,395,60,55,85,-113},new int[]{-48,393,-4,374});
    states[393] = new State(new int[]{85,394});
    states[394] = new State(-98);
    states[395] = new State(new int[]{8,396});
    states[396] = new State(-165);
    states[397] = new State(-164);
    states[398] = new State(new int[]{8,397},new int[]{-50,399});
    states[399] = new State(new int[]{82,395,60,55,85,-113,38,-113},new int[]{-48,400,-4,374});
    states[400] = new State(new int[]{85,401,38,402});
    states[401] = new State(-99);
    states[402] = new State(new int[]{8,408,56,318,58,-60},new int[]{-32,403});
    states[403] = new State(new int[]{58,404});
    states[404] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,405,-31,106,-29,308});
    states[405] = new State(new int[]{59,406});
    states[406] = new State(new int[]{85,407});
    states[407] = new State(-100);
    states[408] = new State(new int[]{85,409});
    states[409] = new State(-101);
    states[410] = new State(new int[]{8,328,52,329,53,330},new int[]{-22,411,-52,331});
    states[411] = new State(new int[]{84,326,35,-102,36,-102,33,-102});
    states[412] = new State(-86);
    states[413] = new State(-83);
    states[414] = new State(-84);
    states[415] = new State(new int[]{19,413,20,414,22,-85},new int[]{-43,416});
    states[416] = new State(new int[]{22,417});
    states[417] = new State(new int[]{8,418});
    states[418] = new State(new int[]{60,55,58,-87},new int[]{-44,419,-4,412});
    states[419] = new State(new int[]{58,420});
    states[420] = new State(new int[]{59,421,29,353,30,360,31,366,32,376,34,410},new int[]{-45,422,-46,351,-49,380});
    states[421] = new State(-81);
    states[422] = new State(new int[]{59,423});
    states[423] = new State(-82);
    states[424] = new State(-49);
    states[425] = new State(new int[]{58,426});
    states[426] = new State(new int[]{59,427,19,413,20,414,18,415,25,433,22,-85},new int[]{-41,428,-42,435,-26,431,-43,343,-27,432,-40,425});
    states[427] = new State(-72);
    states[428] = new State(new int[]{59,429,19,413,20,414,18,415,25,433,22,-85},new int[]{-42,430,-26,431,-43,343,-27,432,-40,425});
    states[429] = new State(-73);
    states[430] = new State(-75);
    states[431] = new State(-76);
    states[432] = new State(-77);
    states[433] = new State(new int[]{8,434});
    states[434] = new State(-78);
    states[435] = new State(-74);
    states[436] = new State(-44);
    states[437] = new State(-42);
    states[438] = new State(new int[]{3,439});
    states[439] = new State(-39);
    states[440] = new State(new int[]{3,441});
    states[441] = new State(-40);
    states[442] = new State(new int[]{8,443});
    states[443] = new State(new int[]{45,438,15,440,60,-41,58,-41},new int[]{-18,444});
    states[444] = new State(new int[]{60,55,58,-43},new int[]{-19,445,-4,437});
    states[445] = new State(new int[]{58,446});
    states[446] = new State(new int[]{17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-20,447,-23,436,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[447] = new State(new int[]{59,448,17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-23,84,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[448] = new State(-34);
    states[449] = new State(-37);
    states[450] = new State(new int[]{8,451});
    states[451] = new State(new int[]{28,457},new int[]{-21,452});
    states[452] = new State(new int[]{60,55,58,-43},new int[]{-19,453,-4,437});
    states[453] = new State(new int[]{58,454});
    states[454] = new State(new int[]{17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-20,455,-23,436,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[455] = new State(new int[]{59,456,17,86,21,341,19,413,20,414,18,415,25,433,23,-65,22,-85},new int[]{-23,84,-24,85,-25,96,-34,97,-26,342,-43,343,-27,424,-40,425});
    states[456] = new State(-35);
    states[457] = new State(new int[]{8,328,52,329,53,330},new int[]{-22,458,-52,331});
    states[458] = new State(new int[]{84,326,60,-36,58,-36});
    states[459] = new State(-12);
    states[460] = new State(new int[]{21,341,23,-65},new int[]{-34,461});
    states[461] = new State(new int[]{23,462});
    states[462] = new State(new int[]{8,463});
    states[463] = new State(new int[]{56,337},new int[]{-35,464});
    states[464] = new State(new int[]{83,335,60,-71,58,-71},new int[]{-36,465});
    states[465] = new State(new int[]{60,55,58,-67},new int[]{-37,466,-4,334});
    states[466] = new State(new int[]{58,467});
    states[467] = new State(new int[]{17,310,85,-56,58,-56,44,-56,45,-56,46,-56,43,-56,88,-56,78,-56,65,-56,66,-56,41,-56,80,-56,81,-56,53,-56,52,-56,3,-56,8,-56,56,-56,63,-56,64,-56,62,-56,50,-56,51,-56,42,-56,40,-56,39,-56,48,-56,49,-56,14,-56,54,-56,59,-56},new int[]{-38,468,-31,106,-29,308});
    states[468] = new State(new int[]{59,469});
    states[469] = new State(-62);
    states[470] = new State(-61);
    states[471] = new State(-6);
    states[472] = new State(new int[]{10,7,9,10,12,48,11,449,16,450,26,470,2,-4,13,-38,21,-38},new int[]{-3,473,-5,471,-6,6,-7,9,-8,47,-9,75,-17,76,-10,459,-33,460});
    states[473] = new State(new int[]{10,7,9,10,12,48,11,449,16,450,26,470,2,-5,13,-38,21,-38},new int[]{-5,5,-6,6,-7,9,-8,47,-9,75,-17,76,-10,459,-33,460});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{2});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-1, new int[]{-4});
    rules[5] = new Rule(-1, new int[]{-4,-3});
    rules[6] = new Rule(-3, new int[]{-5});
    rules[7] = new Rule(-3, new int[]{-3,-5});
    rules[8] = new Rule(-5, new int[]{-6});
    rules[9] = new Rule(-5, new int[]{-7});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-4, new int[]{60,61});
    rules[14] = new Rule(-4, new int[]{60,-11,61});
    rules[15] = new Rule(-11, new int[]{-12});
    rules[16] = new Rule(-11, new int[]{-11,84,-12});
    rules[17] = new Rule(-12, new int[]{8,67,53});
    rules[18] = new Rule(-12, new int[]{8,67,65});
    rules[19] = new Rule(-12, new int[]{8,67,66});
    rules[20] = new Rule(-12, new int[]{8,67,8});
    rules[21] = new Rule(-12, new int[]{8,67,3});
    rules[22] = new Rule(-7, new int[]{9,8,85});
    rules[23] = new Rule(-7, new int[]{9,8,67,-13,85});
    rules[24] = new Rule(-6, new int[]{10,86});
    rules[25] = new Rule(-8, new int[]{12,8,-14,-15,-16,85});
    rules[26] = new Rule(-14, new int[]{45,3});
    rules[27] = new Rule(-14, new int[]{15,3});
    rules[28] = new Rule(-14, new int[]{});
    rules[29] = new Rule(-15, new int[]{83,-13});
    rules[30] = new Rule(-15, new int[]{});
    rules[31] = new Rule(-16, new int[]{-4});
    rules[32] = new Rule(-16, new int[]{});
    rules[33] = new Rule(-9, new int[]{-17,13,8,-18,-19,58,-20,59});
    rules[34] = new Rule(-9, new int[]{-17,21,8,-18,-19,58,-20,59});
    rules[35] = new Rule(-9, new int[]{16,8,-21,-19,58,-20,59});
    rules[36] = new Rule(-21, new int[]{28,-22});
    rules[37] = new Rule(-17, new int[]{11});
    rules[38] = new Rule(-17, new int[]{});
    rules[39] = new Rule(-18, new int[]{45,3});
    rules[40] = new Rule(-18, new int[]{15,3});
    rules[41] = new Rule(-18, new int[]{});
    rules[42] = new Rule(-19, new int[]{-4});
    rules[43] = new Rule(-19, new int[]{});
    rules[44] = new Rule(-20, new int[]{-23});
    rules[45] = new Rule(-20, new int[]{-20,-23});
    rules[46] = new Rule(-23, new int[]{-24});
    rules[47] = new Rule(-23, new int[]{-25});
    rules[48] = new Rule(-23, new int[]{-26});
    rules[49] = new Rule(-23, new int[]{-27});
    rules[50] = new Rule(-24, new int[]{17,-28,83,-13,85});
    rules[51] = new Rule(-24, new int[]{17,-28,83,-13,-4,85});
    rules[52] = new Rule(-28, new int[]{8});
    rules[53] = new Rule(-28, new int[]{8,84,-28});
    rules[54] = new Rule(-29, new int[]{17,-30,83,-13,85});
    rules[55] = new Rule(-31, new int[]{-29,-31});
    rules[56] = new Rule(-31, new int[]{});
    rules[57] = new Rule(-30, new int[]{8});
    rules[58] = new Rule(-30, new int[]{-30,84,8});
    rules[59] = new Rule(-32, new int[]{56,8,83,-13,57});
    rules[60] = new Rule(-32, new int[]{});
    rules[61] = new Rule(-33, new int[]{26});
    rules[62] = new Rule(-10, new int[]{-33,-34,23,8,-35,-36,-37,58,-38,59});
    rules[63] = new Rule(-25, new int[]{-34,23,8,-35,-36,-37,58,-38,59});
    rules[64] = new Rule(-34, new int[]{21});
    rules[65] = new Rule(-34, new int[]{});
    rules[66] = new Rule(-37, new int[]{-4});
    rules[67] = new Rule(-37, new int[]{});
    rules[68] = new Rule(-35, new int[]{56,57});
    rules[69] = new Rule(-35, new int[]{56,-39,57});
    rules[70] = new Rule(-36, new int[]{83,-13});
    rules[71] = new Rule(-36, new int[]{});
    rules[72] = new Rule(-27, new int[]{-40,58,59});
    rules[73] = new Rule(-27, new int[]{-40,58,-41,59});
    rules[74] = new Rule(-41, new int[]{-42});
    rules[75] = new Rule(-41, new int[]{-41,-42});
    rules[76] = new Rule(-42, new int[]{-26});
    rules[77] = new Rule(-42, new int[]{-27});
    rules[78] = new Rule(-40, new int[]{25,8});
    rules[79] = new Rule(-26, new int[]{-43,22,8,-44,58,59});
    rules[80] = new Rule(-26, new int[]{-43,22,8,-44,58,-45,59});
    rules[81] = new Rule(-26, new int[]{18,-43,22,8,-44,58,59});
    rules[82] = new Rule(-26, new int[]{18,-43,22,8,-44,58,-45,59});
    rules[83] = new Rule(-43, new int[]{19});
    rules[84] = new Rule(-43, new int[]{20});
    rules[85] = new Rule(-43, new int[]{});
    rules[86] = new Rule(-44, new int[]{-4});
    rules[87] = new Rule(-44, new int[]{});
    rules[88] = new Rule(-45, new int[]{-46});
    rules[89] = new Rule(-45, new int[]{-46,-45});
    rules[90] = new Rule(-46, new int[]{29,-32,58,-38,59});
    rules[91] = new Rule(-46, new int[]{29,8,85});
    rules[92] = new Rule(-46, new int[]{30,58,-38,59});
    rules[93] = new Rule(-46, new int[]{30,8,85});
    rules[94] = new Rule(-46, new int[]{31,-47,-48,85});
    rules[95] = new Rule(-46, new int[]{32,-47,-48,85});
    rules[96] = new Rule(-46, new int[]{-49,35,8,-48,85});
    rules[97] = new Rule(-46, new int[]{-49,35,-48,-32,58,-38,59,85});
    rules[98] = new Rule(-46, new int[]{-49,36,-50,-48,85});
    rules[99] = new Rule(-46, new int[]{-49,33,-50,-48,85});
    rules[100] = new Rule(-46, new int[]{-49,33,-50,-48,38,-32,58,-38,59,85});
    rules[101] = new Rule(-46, new int[]{-49,33,-50,-48,38,8,85});
    rules[102] = new Rule(-49, new int[]{34,-22});
    rules[103] = new Rule(-47, new int[]{-51});
    rules[104] = new Rule(-47, new int[]{-47,84,-51});
    rules[105] = new Rule(-22, new int[]{-52});
    rules[106] = new Rule(-22, new int[]{-22,84,-52});
    rules[107] = new Rule(-52, new int[]{8});
    rules[108] = new Rule(-52, new int[]{52});
    rules[109] = new Rule(-52, new int[]{53});
    rules[110] = new Rule(-51, new int[]{8});
    rules[111] = new Rule(-51, new int[]{52});
    rules[112] = new Rule(-48, new int[]{-4});
    rules[113] = new Rule(-48, new int[]{});
    rules[114] = new Rule(-13, new int[]{53});
    rules[115] = new Rule(-13, new int[]{4});
    rules[116] = new Rule(-13, new int[]{3});
    rules[117] = new Rule(-13, new int[]{12});
    rules[118] = new Rule(-13, new int[]{13});
    rules[119] = new Rule(-13, new int[]{5});
    rules[120] = new Rule(-13, new int[]{8});
    rules[121] = new Rule(-13, new int[]{6,60,-13,61});
    rules[122] = new Rule(-13, new int[]{7,60,-13,84,-13,61});
    rules[123] = new Rule(-13, new int[]{56,-53,57});
    rules[124] = new Rule(-13, new int[]{56,-39,57});
    rules[125] = new Rule(-53, new int[]{-13});
    rules[126] = new Rule(-53, new int[]{-13,84,-53});
    rules[127] = new Rule(-39, new int[]{8,83,-13});
    rules[128] = new Rule(-39, new int[]{8,83,-13,84,-39});
    rules[129] = new Rule(-54, new int[]{85});
    rules[130] = new Rule(-54, new int[]{58,59});
    rules[131] = new Rule(-54, new int[]{44,85});
    rules[132] = new Rule(-54, new int[]{58,-55,59});
    rules[133] = new Rule(-54, new int[]{45,-56,85});
    rules[134] = new Rule(-54, new int[]{45,-56,84,86,85});
    rules[135] = new Rule(-54, new int[]{46,86,85});
    rules[136] = new Rule(-54, new int[]{43,85});
    rules[137] = new Rule(-54, new int[]{43,-56,85});
    rules[138] = new Rule(-54, new int[]{-56,67,-56,85});
    rules[139] = new Rule(-54, new int[]{-56,68,-56,85});
    rules[140] = new Rule(-54, new int[]{-56,69,-56,85});
    rules[141] = new Rule(-54, new int[]{40,56,-56,57,-54});
    rules[142] = new Rule(-54, new int[]{39,56,-56,57,-54,91,-54});
    rules[143] = new Rule(-54, new int[]{39,56,-56,57,-54});
    rules[144] = new Rule(-54, new int[]{42,8,56,57,85});
    rules[145] = new Rule(-54, new int[]{42,8,56,-57,57,85});
    rules[146] = new Rule(-54, new int[]{8,56,57,85});
    rules[147] = new Rule(-54, new int[]{8,56,-58,57,85});
    rules[148] = new Rule(-54, new int[]{48,-56,85});
    rules[149] = new Rule(-54, new int[]{48,-56,84,-57,85});
    rules[150] = new Rule(-54, new int[]{49,-56,84,-56,85});
    rules[151] = new Rule(-54, new int[]{49,-56,84,-56,84,-57,85});
    rules[152] = new Rule(-54, new int[]{14,-56,85});
    rules[153] = new Rule(-54, new int[]{14,-56,84,-57,85});
    rules[154] = new Rule(-54, new int[]{-59,58,-60,59});
    rules[155] = new Rule(-59, new int[]{54});
    rules[156] = new Rule(-61, new int[]{-62,-32,58,-38,59});
    rules[157] = new Rule(-62, new int[]{55,-22,83});
    rules[158] = new Rule(-60, new int[]{-61});
    rules[159] = new Rule(-60, new int[]{-60,-61});
    rules[160] = new Rule(-38, new int[]{-31});
    rules[161] = new Rule(-38, new int[]{-31,-55});
    rules[162] = new Rule(-55, new int[]{-54});
    rules[163] = new Rule(-55, new int[]{-54,-55});
    rules[164] = new Rule(-50, new int[]{8});
    rules[165] = new Rule(-50, new int[]{-50,82,8});
    rules[166] = new Rule(-56, new int[]{-63});
    rules[167] = new Rule(-63, new int[]{-63,79,-64});
    rules[168] = new Rule(-63, new int[]{-64});
    rules[169] = new Rule(-64, new int[]{-64,77,-65});
    rules[170] = new Rule(-64, new int[]{-65});
    rules[171] = new Rule(-65, new int[]{-66,70,-66});
    rules[172] = new Rule(-65, new int[]{-66,71,-66});
    rules[173] = new Rule(-65, new int[]{-66});
    rules[174] = new Rule(-66, new int[]{-67,72,-67});
    rules[175] = new Rule(-66, new int[]{-67,74,-67});
    rules[176] = new Rule(-66, new int[]{-67,73,-67});
    rules[177] = new Rule(-66, new int[]{-67,75,-67});
    rules[178] = new Rule(-66, new int[]{-67,76,-67});
    rules[179] = new Rule(-66, new int[]{-67});
    rules[180] = new Rule(-67, new int[]{-67,37,-13});
    rules[181] = new Rule(-67, new int[]{-68});
    rules[182] = new Rule(-68, new int[]{-68,87,-69});
    rules[183] = new Rule(-68, new int[]{-68,88,-69});
    rules[184] = new Rule(-68, new int[]{-69});
    rules[185] = new Rule(-69, new int[]{-69,90,-70});
    rules[186] = new Rule(-69, new int[]{-69,89,-70});
    rules[187] = new Rule(-69, new int[]{-70});
    rules[188] = new Rule(-70, new int[]{88,-71});
    rules[189] = new Rule(-70, new int[]{78,-71});
    rules[190] = new Rule(-70, new int[]{-71});
    rules[191] = new Rule(-71, new int[]{65});
    rules[192] = new Rule(-71, new int[]{66});
    rules[193] = new Rule(-71, new int[]{41});
    rules[194] = new Rule(-71, new int[]{80});
    rules[195] = new Rule(-71, new int[]{81});
    rules[196] = new Rule(-71, new int[]{53});
    rules[197] = new Rule(-71, new int[]{52});
    rules[198] = new Rule(-71, new int[]{3});
    rules[199] = new Rule(-71, new int[]{8});
    rules[200] = new Rule(-71, new int[]{-71,82,8});
    rules[201] = new Rule(-71, new int[]{-71,82,3});
    rules[202] = new Rule(-71, new int[]{-71,60,-56,61});
    rules[203] = new Rule(-71, new int[]{56,-56,57});
    rules[204] = new Rule(-71, new int[]{63,56,-56,57});
    rules[205] = new Rule(-71, new int[]{64,56,-56,57});
    rules[206] = new Rule(-71, new int[]{62,56,-56,57});
    rules[207] = new Rule(-71, new int[]{50,56,-13,57});
    rules[208] = new Rule(-71, new int[]{51,56,8,57});
    rules[209] = new Rule(-71, new int[]{42,8,56,57});
    rules[210] = new Rule(-71, new int[]{42,8,56,-57,57});
    rules[211] = new Rule(-71, new int[]{56,-56,84,57});
    rules[212] = new Rule(-71, new int[]{56,-56,84,-58,57});
    rules[213] = new Rule(-71, new int[]{8,56,57});
    rules[214] = new Rule(-71, new int[]{8,56,-58,57});
    rules[215] = new Rule(-71, new int[]{56,8,67,-56,84,57});
    rules[216] = new Rule(-71, new int[]{56,8,67,-56,84,-72,57});
    rules[217] = new Rule(-57, new int[]{-56});
    rules[218] = new Rule(-57, new int[]{-56,84,-57});
    rules[219] = new Rule(-58, new int[]{-56});
    rules[220] = new Rule(-58, new int[]{-56,84,-58});
    rules[221] = new Rule(-72, new int[]{8,67,-56});
    rules[222] = new Rule(-72, new int[]{8,67,-56,84,-72});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // Program -> AnnotationSet
#line 45 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                { AddProgramAnnots(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 5: // Program -> AnnotationSet, TopDeclList
#line 46 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                { AddProgramAnnots(ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 13: // AnnotationSet -> LBRACKET, RBRACKET
#line 64 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushAnnotationSet(); }
#line default
        break;
      case 14: // AnnotationSet -> LBRACKET, AnnotationList, RBRACKET
#line 65 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                      { PushAnnotationSet(); }
#line default
        break;
      case 17: // Annotation -> ID, ASSIGN, NULL
#line 74 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                        { AddAnnotUsrCnstVal(ValueStack[ValueStack.Depth-3].str, P_Root.UserCnstKind.NULL, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 18: // Annotation -> ID, ASSIGN, TRUE
#line 75 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                     { AddAnnotUsrCnstVal(ValueStack[ValueStack.Depth-3].str, P_Root.UserCnstKind.TRUE, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));  }
#line default
        break;
      case 19: // Annotation -> ID, ASSIGN, FALSE
#line 76 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                     { AddAnnotUsrCnstVal(ValueStack[ValueStack.Depth-3].str, P_Root.UserCnstKind.FALSE, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 20: // Annotation -> ID, ASSIGN, ID
#line 77 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                     { AddAnnotStringVal(ValueStack[ValueStack.Depth-3].str, ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));                     }
#line default
        break;
      case 21: // Annotation -> ID, ASSIGN, INT
#line 78 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                     { AddAnnotIntVal(ValueStack[ValueStack.Depth-3].str, ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));                        }
#line default
        break;
      case 22: // TypeDefDecl -> TYPE, ID, SEMICOLON
#line 83 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                        { AddEmptyTypeDef(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 23: // TypeDefDecl -> TYPE, ID, ASSIGN, Type, SEMICOLON
#line 84 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                   { AddTypeDef(ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 24: // IncludeDecl -> INCLUDE, STR
#line 89 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
               { parseIncludedFileNames.Add(ValueStack[ValueStack.Depth-1].str.Substring(1,ValueStack[ValueStack.Depth-1].str.Length-2)); }
#line default
        break;
      case 25: // EventDecl -> EVENT, ID, EvCardOrNone, EvTypeOrNone, EventAnnotOrNone, SEMICOLON
#line 94 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                 { AddEvent(ValueStack[ValueStack.Depth-5].str, ToSpan(LocationStack[LocationStack.Depth-5]), ToSpan(LocationStack[LocationStack.Depth-6])); }
#line default
        break;
      case 26: // EvCardOrNone -> ASSERT, INT
#line 98 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { SetEventCard(ValueStack[ValueStack.Depth-1].str, true,  ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 27: // EvCardOrNone -> ASSUME, INT
#line 99 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { SetEventCard(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 28: // EvCardOrNone -> /* empty */
#line 100 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { }
#line default
        break;
      case 29: // EvTypeOrNone -> COLON, Type
#line 104 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { SetEventType(ToSpan(LocationStack[LocationStack.Depth-2]));                }
#line default
        break;
      case 30: // EvTypeOrNone -> /* empty */
#line 105 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { }
#line default
        break;
      case 31: // EventAnnotOrNone -> AnnotationSet
#line 109 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                    { AddEventAnnots(ToSpan(LocationStack[LocationStack.Depth-1]));              }
#line default
        break;
      case 33: // MachineDecl -> IsMain, MACHINE, ID, MachCardOrNone, MachAnnotOrNone, LCBRACE, 
               //                MachineBody, RCBRACE
#line 115 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddMachine(P_Root.UserCnstKind.REAL, ValueStack[ValueStack.Depth-6].str, ToSpan(LocationStack[LocationStack.Depth-6]), ToSpan(LocationStack[LocationStack.Depth-8]));    }
#line default
        break;
      case 34: // MachineDecl -> IsMain, MODEL, ID, MachCardOrNone, MachAnnotOrNone, LCBRACE, 
               //                MachineBody, RCBRACE
#line 116 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddMachine(P_Root.UserCnstKind.MODEL, ValueStack[ValueStack.Depth-6].str, ToSpan(LocationStack[LocationStack.Depth-6]), ToSpan(LocationStack[LocationStack.Depth-8]));   }
#line default
        break;
      case 35: // MachineDecl -> SPEC, ID, ObservesList, MachAnnotOrNone, LCBRACE, MachineBody, 
               //                RCBRACE
#line 117 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                         { AddMachine(P_Root.UserCnstKind.MONITOR, ValueStack[ValueStack.Depth-6].str, ToSpan(LocationStack[LocationStack.Depth-6]), ToSpan(LocationStack[LocationStack.Depth-7])); }
#line default
        break;
      case 36: // ObservesList -> MONITORS, EventList
#line 121 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { crntObservesList.AddRange(crntEventList); crntEventList.Clear(); }
#line default
        break;
      case 37: // IsMain -> MAIN
#line 125 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { SetMachineIsMain(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 38: // IsMain -> /* empty */
#line 126 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { }
#line default
        break;
      case 39: // MachCardOrNone -> ASSERT, INT
#line 130 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { SetMachineCard(ValueStack[ValueStack.Depth-1].str, true,  ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 40: // MachCardOrNone -> ASSUME, INT
#line 131 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { SetMachineCard(ValueStack[ValueStack.Depth-1].str, false, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 41: // MachCardOrNone -> /* empty */
#line 132 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { }
#line default
        break;
      case 42: // MachAnnotOrNone -> AnnotationSet
#line 136 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                    { AddMachineAnnots(ToSpan(LocationStack[LocationStack.Depth-1]));              }
#line default
        break;
      case 50: // VarDecl -> VAR, VarList, COLON, Type, SEMICOLON
#line 155 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                 { AddVarDecls(false, ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 51: // VarDecl -> VAR, VarList, COLON, Type, AnnotationSet, SEMICOLON
#line 156 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                  { AddVarDecls(true,  ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 52: // VarList -> ID
#line 160 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                       { AddVarDecl(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 53: // VarList -> ID, COMMA, VarList
#line 161 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                       { AddVarDecl(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 54: // LocalVarDecl -> VAR, LocalVarList, COLON, Type, SEMICOLON
#line 165 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                    { localVarStack.CompleteCrntLocalVarList(); }
#line default
        break;
      case 57: // LocalVarList -> ID
#line 174 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { localVarStack.AddLocalVar(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 58: // LocalVarList -> LocalVarList, COMMA, ID
#line 175 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                            { localVarStack.AddLocalVar(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 59: // PayloadVarDeclOrNone -> LPAREN, ID, COLON, Type, RPAREN
#line 179 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                               { localVarStack.AddPayloadVar(ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-4])); localVarStack.Push(); }
#line default
        break;
      case 60: // PayloadVarDeclOrNone -> /* empty */
#line 180 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                               { localVarStack.AddPayloadVar(); localVarStack.Push(); }
#line default
        break;
      case 61: // Static -> STATIC
#line 185 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
          { isStaticFun = true; }
#line default
        break;
      case 62: // StaticFunDecl -> Static, IsModel, FUN, ID, ParamsOrNone, RetTypeOrNone, 
               //                  FunAnnotOrNone, LCBRACE, StmtBlock, RCBRACE
#line 189 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                             { AddFunction(ValueStack[ValueStack.Depth-7].str, ToSpan(LocationStack[LocationStack.Depth-7]), ToSpan(LocationStack[LocationStack.Depth-10]), ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]), true); }
#line default
        break;
      case 63: // FunDecl -> IsModel, FUN, ID, ParamsOrNone, RetTypeOrNone, FunAnnotOrNone, 
               //            LCBRACE, StmtBlock, RCBRACE
#line 193 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                      { AddFunction(ValueStack[ValueStack.Depth-7].str, ToSpan(LocationStack[LocationStack.Depth-7]), ToSpan(LocationStack[LocationStack.Depth-9]), ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]), false); }
#line default
        break;
      case 64: // IsModel -> MODEL
#line 197 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                   { SetFunKind(P_Root.UserCnstKind.MODEL, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 65: // IsModel -> /* empty */
#line 198 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { }
#line default
        break;
      case 66: // FunAnnotOrNone -> AnnotationSet
#line 202 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { AddFunAnnots(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 69: // ParamsOrNone -> LPAREN, NmdTupTypeList, RPAREN
#line 208 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                 { SetFunParams(ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 70: // RetTypeOrNone -> COLON, Type
#line 212 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                    { SetFunReturn(ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 72: // Group -> GroupName, LCBRACE, RCBRACE
#line 218 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                            { AddGroup(); }
#line default
        break;
      case 73: // Group -> GroupName, LCBRACE, GroupBody, RCBRACE
#line 219 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                            { AddGroup(); }
#line default
        break;
      case 78: // GroupName -> GROUP, ID
#line 233 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
               { PushGroup(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1]), ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 79: // StateDecl -> IsHotOrColdOrNone, STATE, ID, StateAnnotOrNone, LCBRACE, RCBRACE
#line 238 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddState(ValueStack[ValueStack.Depth-4].str, false, ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-6])); }
#line default
        break;
      case 80: // StateDecl -> IsHotOrColdOrNone, STATE, ID, StateAnnotOrNone, LCBRACE, StateBody, 
               //              RCBRACE
#line 239 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddState(ValueStack[ValueStack.Depth-5].str, false, ToSpan(LocationStack[LocationStack.Depth-5]), ToSpan(LocationStack[LocationStack.Depth-7])); }
#line default
        break;
      case 81: // StateDecl -> START, IsHotOrColdOrNone, STATE, ID, StateAnnotOrNone, LCBRACE, 
               //              RCBRACE
#line 240 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddState(ValueStack[ValueStack.Depth-4].str, true,  ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-7])); }
#line default
        break;
      case 82: // StateDecl -> START, IsHotOrColdOrNone, STATE, ID, StateAnnotOrNone, LCBRACE, 
               //              StateBody, RCBRACE
#line 241 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                { AddState(ValueStack[ValueStack.Depth-5].str, true,  ToSpan(LocationStack[LocationStack.Depth-5]), ToSpan(LocationStack[LocationStack.Depth-8])); }
#line default
        break;
      case 83: // IsHotOrColdOrNone -> HOT
#line 245 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
              { SetStateIsHot(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 84: // IsHotOrColdOrNone -> COLD
#line 246 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
          { SetStateIsCold(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 86: // StateAnnotOrNone -> AnnotationSet
#line 251 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { AddStateAnnots(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 90: // StateBodyItem -> ENTRY, PayloadVarDeclOrNone, LCBRACE, StmtBlock, RCBRACE
#line 261 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                            { SetStateEntry(ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));                                  }
#line default
        break;
      case 91: // StateBodyItem -> ENTRY, ID, SEMICOLON
#line 262 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                  { SetStateEntry(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 92: // StateBodyItem -> EXIT, LCBRACE, StmtBlock, RCBRACE
#line 263 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                           { localVarStack.AddPayloadVar(); localVarStack.Push(); SetStateExit(ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1]));                                   }
#line default
        break;
      case 93: // StateBodyItem -> EXIT, ID, SEMICOLON
#line 264 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                  { SetStateExit(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2]));                                 }
#line default
        break;
      case 94: // StateBodyItem -> DEFER, NonDefaultEventList, TrigAnnotOrNone, SEMICOLON
#line 265 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { AddDefersOrIgnores(true,  ToSpan(LocationStack[LocationStack.Depth-4]));            }
#line default
        break;
      case 95: // StateBodyItem -> IGNORE, NonDefaultEventList, TrigAnnotOrNone, SEMICOLON
#line 266 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                            { AddDefersOrIgnores(false, ToSpan(LocationStack[LocationStack.Depth-4]));            }
#line default
        break;
      case 96: // StateBodyItem -> OnEventList, DO, ID, TrigAnnotOrNone, SEMICOLON
#line 267 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                     { AddDoNamedAction(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 97: // StateBodyItem -> OnEventList, DO, TrigAnnotOrNone, PayloadVarDeclOrNone, 
               //                  LCBRACE, StmtBlock, RCBRACE, SEMICOLON
#line 268 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                               { AddDoAnonyAction(ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-8])); }
#line default
        break;
      case 98: // StateBodyItem -> OnEventList, PUSH, StateTarget, TrigAnnotOrNone, SEMICOLON
#line 269 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                             { AddTransition(true, ToSpan(LocationStack[LocationStack.Depth-5]));           }
#line default
        break;
      case 99: // StateBodyItem -> OnEventList, GOTO, StateTarget, TrigAnnotOrNone, SEMICOLON
#line 270 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                              { AddTransition(false, ToSpan(LocationStack[LocationStack.Depth-5]));          }
#line default
        break;
      case 100: // StateBodyItem -> OnEventList, GOTO, StateTarget, TrigAnnotOrNone, WITH, 
                //                  PayloadVarDeclOrNone, LCBRACE, StmtBlock, RCBRACE, SEMICOLON
#line 271 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                                                              { AddTransitionWithAction(ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-10]));           }
#line default
        break;
      case 101: // StateBodyItem -> OnEventList, GOTO, StateTarget, TrigAnnotOrNone, WITH, ID, 
                //                  SEMICOLON
#line 272 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                   { AddTransitionWithAction(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-7]));           }
#line default
        break;
      case 102: // OnEventList -> ON, EventList
#line 276 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                   { onEventList = new List<P_Root.EventLabel>(crntEventList); crntEventList.Clear(); }
#line default
        break;
      case 107: // EventId -> ID
#line 290 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { AddToEventList(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1]));                      }
#line default
        break;
      case 108: // EventId -> HALT
#line 291 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { AddToEventList(P_Root.UserCnstKind.HALT, ToSpan(LocationStack[LocationStack.Depth-1]));    }
#line default
        break;
      case 109: // EventId -> NULL
#line 292 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { AddToEventList(P_Root.UserCnstKind.NULL, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 110: // NonDefaultEventId -> ID
#line 296 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { AddToEventList(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1]));                      }
#line default
        break;
      case 111: // NonDefaultEventId -> HALT
#line 297 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { AddToEventList(P_Root.UserCnstKind.HALT, ToSpan(LocationStack[LocationStack.Depth-1]));    }
#line default
        break;
      case 112: // TrigAnnotOrNone -> AnnotationSet
#line 301 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                     { SetTrigAnnotated(ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 114: // Type -> NULL
#line 308 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.NULL,    ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 115: // Type -> BOOL
#line 309 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.BOOL,    ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 116: // Type -> INT
#line 310 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.INT,     ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 117: // Type -> EVENT
#line 311 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.EVENT,   ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 118: // Type -> MACHINE
#line 312 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.REAL,    ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 119: // Type -> ANY
#line 313 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushTypeExpr(MkBaseType(P_Root.UserCnstKind.ANY,     ToSpan(LocationStack[LocationStack.Depth-1]))); }
#line default
        break;
      case 120: // Type -> ID
#line 314 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushNameType(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 121: // Type -> SEQ, LBRACKET, Type, RBRACKET
#line 315 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushSeqType(ToSpan(LocationStack[LocationStack.Depth-4])); }
#line default
        break;
      case 122: // Type -> MAP, LBRACKET, Type, COMMA, Type, RBRACKET
#line 316 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushMapType(ToSpan(LocationStack[LocationStack.Depth-6])); }
#line default
        break;
      case 125: // TupTypeList -> Type
#line 322 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
             { PushTupType(ToSpan(LocationStack[LocationStack.Depth-1]), true);  }
#line default
        break;
      case 126: // TupTypeList -> Type, COMMA, TupTypeList
#line 323 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                          { PushTupType(ToSpan(LocationStack[LocationStack.Depth-3]), false); }
#line default
        break;
      case 127: // NmdTupTypeList -> ID, COLON, Type
#line 327 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                        { PushNmdTupType(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3]), true);  }
#line default
        break;
      case 128: // NmdTupTypeList -> ID, COLON, Type, COMMA, NmdTupTypeList
#line 328 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                       { PushNmdTupType(ValueStack[ValueStack.Depth-5].str, ToSpan(LocationStack[LocationStack.Depth-5]), false); }
#line default
        break;
      case 129: // Stmt -> SEMICOLON
#line 334 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushNulStmt(P_Root.UserCnstKind.SKIP,  ToSpan(LocationStack[LocationStack.Depth-1]));      }
#line default
        break;
      case 130: // Stmt -> LCBRACE, RCBRACE
#line 335 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushNulStmt(P_Root.UserCnstKind.SKIP,  ToSpan(LocationStack[LocationStack.Depth-2]));      }
#line default
        break;
      case 131: // Stmt -> POP, SEMICOLON
#line 336 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushNulStmt(P_Root.UserCnstKind.POP,   ToSpan(LocationStack[LocationStack.Depth-2]));      }
#line default
        break;
      case 132: // Stmt -> LCBRACE, StmtList, RCBRACE
#line 337 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { }
#line default
        break;
      case 133: // Stmt -> ASSERT, Exp, SEMICOLON
#line 338 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushAssert(ToSpan(LocationStack[LocationStack.Depth-3]));                                  }
#line default
        break;
      case 134: // Stmt -> ASSERT, Exp, COMMA, STR, SEMICOLON
#line 339 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushAssert(ValueStack[ValueStack.Depth-2].str.Substring(1,ValueStack[ValueStack.Depth-2].str.Length-2), ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 135: // Stmt -> PRINT, STR, SEMICOLON
#line 340 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushPrint(ValueStack[ValueStack.Depth-2].str.Substring(1,ValueStack[ValueStack.Depth-2].str.Length-2), ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-3]));  }
#line default
        break;
      case 136: // Stmt -> RETURN, SEMICOLON
#line 341 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushReturn(false, ToSpan(LocationStack[LocationStack.Depth-2]));                           }
#line default
        break;
      case 137: // Stmt -> RETURN, Exp, SEMICOLON
#line 342 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushReturn(true, ToSpan(LocationStack[LocationStack.Depth-3]));                            }
#line default
        break;
      case 138: // Stmt -> Exp, ASSIGN, Exp, SEMICOLON
#line 343 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushBinStmt(P_Root.UserCnstKind.ASSIGN, ToSpan(LocationStack[LocationStack.Depth-4]));     }
#line default
        break;
      case 139: // Stmt -> Exp, REMOVE, Exp, SEMICOLON
#line 344 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushBinStmt(P_Root.UserCnstKind.REMOVE, ToSpan(LocationStack[LocationStack.Depth-4]));     }
#line default
        break;
      case 140: // Stmt -> Exp, INSERT, Exp, SEMICOLON
#line 345 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                     { PushBinStmt(P_Root.UserCnstKind.INSERT, ToSpan(LocationStack[LocationStack.Depth-4]));	 }
#line default
        break;
      case 141: // Stmt -> WHILE, LPAREN, Exp, RPAREN, Stmt
#line 346 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushWhile(ToSpan(LocationStack[LocationStack.Depth-5]));                                   }
#line default
        break;
      case 142: // Stmt -> IF, LPAREN, Exp, RPAREN, Stmt, ELSE, Stmt
#line 347 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushIte(true, ToSpan(LocationStack[LocationStack.Depth-7]));                               }
#line default
        break;
      case 143: // Stmt -> IF, LPAREN, Exp, RPAREN, Stmt
#line 348 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                        { PushIte(false, ToSpan(LocationStack[LocationStack.Depth-5]));                              }
#line default
        break;
      case 144: // Stmt -> NEW, ID, LPAREN, RPAREN, SEMICOLON
#line 349 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                         { PushNewStmt(ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-4]), false, ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 145: // Stmt -> NEW, ID, LPAREN, SingleExprArgList, RPAREN, SEMICOLON
#line 350 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                        { PushNewStmt(ValueStack[ValueStack.Depth-5].str, ToSpan(LocationStack[LocationStack.Depth-5]), true, ToSpan(LocationStack[LocationStack.Depth-6])); }
#line default
        break;
      case 146: // Stmt -> ID, LPAREN, RPAREN, SEMICOLON
#line 351 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushFunStmt(ValueStack[ValueStack.Depth-4].str, false, ToSpan(LocationStack[LocationStack.Depth-4]));                  }
#line default
        break;
      case 147: // Stmt -> ID, LPAREN, ExprArgList, RPAREN, SEMICOLON
#line 352 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushFunStmt(ValueStack[ValueStack.Depth-5].str, true,  ToSpan(LocationStack[LocationStack.Depth-5]));                  }
#line default
        break;
      case 148: // Stmt -> RAISE, Exp, SEMICOLON
#line 353 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushRaise(false, ToSpan(LocationStack[LocationStack.Depth-3]));                            }
#line default
        break;
      case 149: // Stmt -> RAISE, Exp, COMMA, SingleExprArgList, SEMICOLON
#line 354 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushRaise(true,  ToSpan(LocationStack[LocationStack.Depth-5]));                            }
#line default
        break;
      case 150: // Stmt -> SEND, Exp, COMMA, Exp, SEMICOLON
#line 355 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushSend(false, ToSpan(LocationStack[LocationStack.Depth-5]));                             }
#line default
        break;
      case 151: // Stmt -> SEND, Exp, COMMA, Exp, COMMA, SingleExprArgList, SEMICOLON
#line 356 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushSend(true,  ToSpan(LocationStack[LocationStack.Depth-7]));                             }
#line default
        break;
      case 152: // Stmt -> MONITOR, Exp, SEMICOLON
#line 357 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                   { PushMonitor(false, ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-3]));      }
#line default
        break;
      case 153: // Stmt -> MONITOR, Exp, COMMA, SingleExprArgList, SEMICOLON
#line 358 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                           { PushMonitor(true, ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-4]), ToSpan(LocationStack[LocationStack.Depth-5]));       }
#line default
        break;
      case 154: // Stmt -> ReceiveStmt, LCBRACE, CaseList, RCBRACE
#line 359 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                               { PushReceive(ToSpan(LocationStack[LocationStack.Depth-4])); }
#line default
        break;
      case 155: // ReceiveStmt -> RECEIVE
#line 363 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                        { localVarStack.PushCasesList(); }
#line default
        break;
      case 156: // Case -> CaseEventList, PayloadVarDeclOrNone, LCBRACE, StmtBlock, RCBRACE
#line 367 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                                  { AddCaseAnonyAction(ToSpan(LocationStack[LocationStack.Depth-3]), ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 160: // StmtBlock -> LocalVarDeclList
#line 380 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                                            { PushNulStmt(); }
#line default
        break;
      case 163: // StmtList -> Stmt, StmtList
#line 386 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { PushSeq(); }
#line default
        break;
      case 164: // StateTarget -> ID
#line 390 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                          { QualifyStateTarget(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 165: // StateTarget -> StateTarget, DOT, ID
#line 391 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                        { QualifyStateTarget(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 167: // Exp_8 -> Exp_8, LOR, Exp_7
#line 401 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                   { PushBinExpr(P_Root.UserCnstKind.OR, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 169: // Exp_7 -> Exp_7, LAND, Exp_6
#line 406 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { PushBinExpr(P_Root.UserCnstKind.AND, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 171: // Exp_6 -> Exp_5, EQ, Exp_5
#line 411 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.EQ,  ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 172: // Exp_6 -> Exp_5, NE, Exp_5
#line 412 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.NEQ, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 174: // Exp_5 -> Exp_4, LT, Exp_4
#line 417 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.LT, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 175: // Exp_5 -> Exp_4, LE, Exp_4
#line 418 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.LE, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 176: // Exp_5 -> Exp_4, GT, Exp_4
#line 419 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.GT, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 177: // Exp_5 -> Exp_4, GE, Exp_4
#line 420 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.GE, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 178: // Exp_5 -> Exp_4, IN, Exp_4
#line 421 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                  { PushBinExpr(P_Root.UserCnstKind.IN, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 180: // Exp_4 -> Exp_4, AS, Type
#line 426 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                 { PushCast(ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 182: // Exp_3 -> Exp_3, PLUS, Exp_2
#line 431 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { PushBinExpr(P_Root.UserCnstKind.ADD, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 183: // Exp_3 -> Exp_3, MINUS, Exp_2
#line 432 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                      { PushBinExpr(P_Root.UserCnstKind.SUB, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 185: // Exp_2 -> Exp_2, MUL, Exp_1
#line 437 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { PushBinExpr(P_Root.UserCnstKind.MUL,    ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 186: // Exp_2 -> Exp_2, DIV, Exp_1
#line 438 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                    { PushBinExpr(P_Root.UserCnstKind.INTDIV, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 188: // Exp_1 -> MINUS, Exp_0
#line 443 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
               { PushUnExpr(P_Root.UserCnstKind.NEG, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 189: // Exp_1 -> LNOT, Exp_0
#line 444 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
               { PushUnExpr(P_Root.UserCnstKind.NOT, ToSpan(LocationStack[LocationStack.Depth-2])); }
#line default
        break;
      case 191: // Exp_0 -> TRUE
#line 449 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.TRUE,       ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 192: // Exp_0 -> FALSE
#line 450 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.FALSE,      ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 193: // Exp_0 -> THIS
#line 451 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.THIS,       ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 194: // Exp_0 -> NONDET
#line 452 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.NONDET,     ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 195: // Exp_0 -> FAIRNONDET
#line 453 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.FAIRNONDET, ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 196: // Exp_0 -> NULL
#line 454 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.NULL,       ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 197: // Exp_0 -> HALT
#line 455 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushNulExpr(P_Root.UserCnstKind.HALT,       ToSpan(LocationStack[LocationStack.Depth-1])); }
#line default
        break;
      case 198: // Exp_0 -> INT
#line 456 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushIntExpr(ValueStack[ValueStack.Depth-1].str,  ToSpan(LocationStack[LocationStack.Depth-1]));                        }
#line default
        break;
      case 199: // Exp_0 -> ID
#line 457 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushName(ValueStack[ValueStack.Depth-1].str,     ToSpan(LocationStack[LocationStack.Depth-1]));                        }
#line default
        break;
      case 200: // Exp_0 -> Exp_0, DOT, ID
#line 458 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushField(ValueStack[ValueStack.Depth-1].str,    ToSpan(LocationStack[LocationStack.Depth-1]));                        }
#line default
        break;
      case 201: // Exp_0 -> Exp_0, DOT, INT
#line 459 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushFieldInt(ValueStack[ValueStack.Depth-1].str, ToSpan(LocationStack[LocationStack.Depth-1]));                        }
#line default
        break;
      case 202: // Exp_0 -> Exp_0, LBRACKET, Exp, RBRACKET
#line 460 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushBinExpr(P_Root.UserCnstKind.IDX,        ToSpan(LocationStack[LocationStack.Depth-3])); }
#line default
        break;
      case 203: // Exp_0 -> LPAREN, Exp, RPAREN
#line 461 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { }
#line default
        break;
      case 204: // Exp_0 -> KEYS, LPAREN, Exp, RPAREN
#line 462 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushUnExpr(P_Root.UserCnstKind.KEYS,   ToSpan(LocationStack[LocationStack.Depth-4]));      }
#line default
        break;
      case 205: // Exp_0 -> VALUES, LPAREN, Exp, RPAREN
#line 463 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushUnExpr(P_Root.UserCnstKind.VALUES, ToSpan(LocationStack[LocationStack.Depth-4]));      }
#line default
        break;
      case 206: // Exp_0 -> SIZEOF, LPAREN, Exp, RPAREN
#line 464 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushUnExpr(P_Root.UserCnstKind.SIZEOF, ToSpan(LocationStack[LocationStack.Depth-4]));      }
#line default
        break;
      case 207: // Exp_0 -> DEFAULT, LPAREN, Type, RPAREN
#line 465 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                             { PushDefaultExpr(ToSpan(LocationStack[LocationStack.Depth-4]));                             }
#line default
        break;
      case 208: // Exp_0 -> FRESH, LPAREN, ID, RPAREN
#line 466 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushFreshExpr(ValueStack[ValueStack.Depth-2].str, ToSpan(LocationStack[LocationStack.Depth-2]), ToSpan(LocationStack[LocationStack.Depth-4]));           }
#line default
        break;
      case 209: // Exp_0 -> NEW, ID, LPAREN, RPAREN
#line 467 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                               { PushNewExpr(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3]), false, ToSpan(LocationStack[LocationStack.Depth-4])); }
#line default
        break;
      case 210: // Exp_0 -> NEW, ID, LPAREN, SingleExprArgList, RPAREN
#line 468 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                            { PushNewExpr(ValueStack[ValueStack.Depth-4].str, ToSpan(LocationStack[LocationStack.Depth-4]), true, ToSpan(LocationStack[LocationStack.Depth-5])); }
#line default
        break;
      case 211: // Exp_0 -> LPAREN, Exp, COMMA, RPAREN
#line 469 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushTupleExpr(true);                                     }
#line default
        break;
      case 212: // Exp_0 -> LPAREN, Exp, COMMA, ExprArgList, RPAREN
#line 470 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushTupleExpr(false);                                    }
#line default
        break;
      case 213: // Exp_0 -> ID, LPAREN, RPAREN
#line 471 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushFunExpr(ValueStack[ValueStack.Depth-3].str, false, ToSpan(LocationStack[LocationStack.Depth-3]));                  }
#line default
        break;
      case 214: // Exp_0 -> ID, LPAREN, ExprArgList, RPAREN
#line 472 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushFunExpr(ValueStack[ValueStack.Depth-4].str, true, ToSpan(LocationStack[LocationStack.Depth-4]));                   }
#line default
        break;
      case 215: // Exp_0 -> LPAREN, ID, ASSIGN, Exp, COMMA, RPAREN
#line 473 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushNmdTupleExpr(ValueStack[ValueStack.Depth-5].str, ToSpan(LocationStack[LocationStack.Depth-5]), true);              }
#line default
        break;
      case 216: // Exp_0 -> LPAREN, ID, ASSIGN, Exp, COMMA, NmdExprArgList, RPAREN
#line 475 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                          { PushNmdTupleExpr(ValueStack[ValueStack.Depth-6].str, ToSpan(LocationStack[LocationStack.Depth-6]), false);             }
#line default
        break;
      case 217: // SingleExprArgList -> Exp
#line 480 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                 { MoveValToExprs(false); }
#line default
        break;
      case 218: // SingleExprArgList -> Exp, COMMA, SingleExprArgList
#line 481 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                               { PushExprs();           }
#line default
        break;
      case 219: // ExprArgList -> Exp
#line 486 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
           { MoveValToExprs(true);  }
#line default
        break;
      case 220: // ExprArgList -> Exp, COMMA, ExprArgList
#line 487 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                         { PushExprs();           }
#line default
        break;
      case 221: // NmdExprArgList -> ID, ASSIGN, Exp
#line 492 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                   { MoveValToNmdExprs(ValueStack[ValueStack.Depth-3].str, ToSpan(LocationStack[LocationStack.Depth-3]));  }
#line default
        break;
      case 222: // NmdExprArgList -> ID, ASSIGN, Exp, COMMA, NmdExprArgList
#line 493 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
                                      { PushNmdExprs(ValueStack[ValueStack.Depth-5].str, ToSpan(LocationStack[LocationStack.Depth-5]));       }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 496 "../../../Dependencies/P/Src/Pc/Compiler/Parser/parser.y"
 #line default
}
}
